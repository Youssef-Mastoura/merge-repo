{"ast":null,"code":"import { catchError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class UserService {\n  constructor(http, authService, router) {\n    this.http = http;\n    this.authService = authService;\n    this.router = router;\n    this.apiServerUrl = \"http://localhost:8089/skillswap\";\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiServerUrl}/user/login`, credentials).pipe(catchError(error => {\n      // Transforme l'erreur en un format plus lisible\n      if (error.status === 401) {\n        throw new Error('Email ou mot de passe incorrect');\n      }\n      throw new Error('Erreur de connexion au serveur');\n    }));\n  }\n  logout() {\n    this.authService.clearAuth();\n    this.router.navigate(['/admin/login-admin']);\n  }\n  getUsers() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get(`${this.apiServerUrl}/user/getall`, {\n      headers\n    });\n  }\n  addUser(user) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n      //  'Authorization': 'Bearer your-token' \n    });\n\n    return this.http.post(`${this.apiServerUrl}/user/register`, user);\n  }\n  updateuser(user) {\n    return this.http.put(`${this.apiServerUrl}update`, user);\n  }\n  deleteUser(userId) {\n    return this.http.delete(`${this.apiServerUrl}/user/delete/${userId}`);\n  }\n  exportUsersToExcel() {\n    window.open(`${this.apiServerUrl}/user/export/excel`, '_blank');\n  }\n  // Dans user.service.ts\n  resetPassword(email) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiServerUrl}/user/resetpassword/${email}`, null, {\n      headers\n    }).pipe(catchError(error => {\n      if (error.status === 404) {\n        throw new Error('Utilisateur introuvable');\n      }\n      throw new Error(error.error?.message || 'Erreur lors de la demande de réinitialisation');\n    }));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","HttpHeaders","UserService","constructor","http","authService","router","apiServerUrl","login","credentials","post","pipe","error","status","Error","logout","clearAuth","navigate","getUsers","headers","get","addUser","user","updateuser","put","deleteUser","userId","delete","exportUsersToExcel","window","open","resetPassword","email","message","i0","ɵɵinject","i1","HttpClient","i2","AuthService","i3","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sakka\\Desktop\\PICLOUD-GestionUser - Copie\\dashboard-v2\\src\\app\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, Observable } from 'rxjs';\nimport { User } from './models/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private apiServerUrl =\"http://localhost:8089/skillswap\";\n\n  constructor(private http: HttpClient,private authService:AuthService,private router:Router){}\n  \n  login(credentials: {email: string, password: string}): Observable<any> {\n    return this.http.post(`${this.apiServerUrl}/user/login`, credentials).pipe(\n      catchError(error => {\n        // Transforme l'erreur en un format plus lisible\n        if (error.status === 401) {\n          throw new Error('Email ou mot de passe incorrect');\n        }\n        throw new Error('Erreur de connexion au serveur');\n      })\n    );\n  }\n  logout() {\n    this.authService.clearAuth();\n    this.router.navigate(['/admin/login-admin']);\n  }\n\n  public getUsers(): Observable<User[]> {\n    const headers =new HttpHeaders({\n      'Content-Type': 'application/json',\n     // 'Authorization': `Bearer ${token}`\n    });\n  \n    return this.http.get<User[]>(`${this.apiServerUrl}/user/getall`,{headers});\n  }\n\n  public addUser(user: User): Observable<User> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    //  'Authorization': 'Bearer your-token' \n    });\n    return this.http.post<User>(`${this.apiServerUrl}/user/register`, user)\n  }\n\n  public updateuser(user: User): Observable<User> {\n    return this.http.put<User>(`${this.apiServerUrl}update`, user);\n  }\n\n  public deleteUser(userId: number): Observable<void> {\n    \n    return this.http.delete<void>(`${this.apiServerUrl}/user/delete/${userId}`);\n  }\n\n  exportUsersToExcel(): void {\n    window.open(`${this.apiServerUrl}/user/export/excel`, '_blank');\n  }\n\n  // Dans user.service.ts\n  public resetPassword(email: string): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    return this.http.post(`${this.apiServerUrl}/user/resetpassword/${email}`, null, { headers }).pipe(\n      catchError(error => {\n        if (error.status === 404) {\n          throw new Error('Utilisateur introuvable');\n        }\n        throw new Error(error.error?.message || 'Erreur lors de la demande de réinitialisation');\n      })\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}