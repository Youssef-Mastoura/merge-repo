{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let CourseContentBComponent = class CourseContentBComponent {\n  constructor(fb, route, router, courseService, contentService, sanitizer) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.courseService = courseService;\n    this.contentService = contentService;\n    this.sanitizer = sanitizer;\n    this.contents = [];\n    this.editingContentId = null;\n    this.contentTypes = ['VIDEO', 'PDF', 'QUIZ', 'TEXT'];\n    this.selectedFileError = null;\n    this.selectedFile = null;\n    this.selectedContent = null;\n    this.contentType = '';\n    this.safeVideoUrl = null;\n    this.pdfUrl = '';\n    this.textContent = '';\n    this.isContentModalOpen = false;\n    this.isSubmitting = false;\n    this.isOwner = false;\n    this.staticTeacherId = 1;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.courseId = +params['id'];\n      this.loadCourseAndContents();\n      this.initForm();\n    });\n  }\n  initForm() {\n    this.contentForm = this.fb.group({\n      title: ['', [Validators.required, Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      url: [''],\n      description: [''],\n      orderIndex: [0, [Validators.required, Validators.min(0)]],\n      duration: [0, [Validators.min(0)]],\n      quizTitle: [''],\n      questions: this.fb.array([])\n    });\n  }\n  get questions() {\n    return this.contentForm.get('questions');\n  }\n  getQuestionOptions(questionIndex) {\n    return this.questions.at(questionIndex).get('options');\n  }\n  loadCourseAndContents() {\n    this.courseService.getCourseById(this.courseId).subscribe(course => {\n      this.course = course;\n      this.isOwner = course.teacherId === this.staticTeacherId; // Vérifie si c'est le propriétaire\n      this.loadContents();\n    }, error => console.error('Error loading course:', error));\n  }\n  loadContents() {\n    this.contentService.getContentsByCourseId(this.courseId).subscribe(contents => {\n      this.contents = contents.sort((a, b) => (a.orderIndex_Content || 0) - (b.orderIndex_Content || 0));\n    }, error => console.error('Error loading contents:', error));\n  }\n  onTypeChange() {\n    const type = this.contentForm.get('type')?.value;\n    // Reset relevant fields when type changes\n    if (type !== 'QUIZ') {\n      this.contentForm.setControl('questions', this.fb.array([]));\n    }\n    if (type !== 'PDF') {\n      this.selectedFile = null;\n      this.selectedFileError = null;\n      if (this.pdfFileInput) {\n        this.pdfFileInput.nativeElement.value = '';\n      }\n    }\n    if (type !== 'VIDEO') {\n      this.contentForm.get('url')?.reset();\n    }\n    if (type !== 'TEXT') {\n      this.contentForm.get('description')?.reset();\n    }\n  }\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      // Validate file type\n      if (file.type !== 'application/pdf') {\n        this.selectedFileError = 'Please select a valid PDF file';\n        this.pdfFileInput.nativeElement.value = '';\n        return;\n      }\n      // Validate file size (5MB max)\n      if (file.size > 5 * 1024 * 1024) {\n        this.selectedFileError = 'File size exceeds 5MB limit';\n        this.pdfFileInput.nativeElement.value = '';\n        return;\n      }\n      this.selectedFile = file;\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.pdfUrl = e.target.result;\n        this.contentForm.patchValue({\n          url: e.target.result\n        });\n      };\n      reader.readAsDataURL(file);\n      this.selectedFileError = null;\n    }\n  }\n  addQuestion() {\n    this.questions.push(this.fb.group({\n      text: ['', Validators.required],\n      options: this.fb.array([this.fb.control('', Validators.required)]),\n      correctAnswer: [0, Validators.required]\n    }));\n  }\n  removeQuestion(index) {\n    this.questions.removeAt(index);\n  }\n  addOption(questionIndex) {\n    this.getQuestionOptions(questionIndex).push(this.fb.control('', Validators.required));\n  }\n  removeOption(questionIndex, optionIndex) {\n    this.getQuestionOptions(questionIndex).removeAt(optionIndex);\n  }\n  showContent(content) {\n    this.selectedContent = content;\n    this.contentType = content.type_Content;\n    this.isContentModalOpen = true;\n    switch (content.type_Content) {\n      case 'VIDEO':\n        this.handleVideoContent(content.url_Content);\n        break;\n      case 'PDF':\n        this.pdfUrl = content.url_Content || '';\n        break;\n      case 'QUIZ':\n        try {\n          this.quizData = JSON.parse(content.description_Content || '{}');\n        } catch {\n          this.quizData = {\n            title: 'Quiz',\n            questions: []\n          };\n        }\n        break;\n      case 'TEXT':\n        this.textContent = content.description_Content || '';\n        break;\n    }\n  }\n  handleVideoContent(url = '') {\n    if (this.isYouTubeUrl(url)) {\n      const videoId = this.getYouTubeId(url);\n      const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1`;\n      this.safeVideoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(embedUrl);\n    } else {\n      this.safeVideoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    }\n  }\n  isYouTubeUrl(url) {\n    return url?.includes('youtube.com') || url?.includes('youtu.be');\n  }\n  getYouTubeId(url) {\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[2].length === 11 ? match[2] : '';\n  }\n  getSafePdfUrl(url) {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n  getSafeHtml(content) {\n    return this.sanitizer.bypassSecurityTrustHtml(content);\n  }\n  getCharFromCode(code) {\n    return String.fromCharCode(code);\n  }\n  closeContentModal() {\n    this.isContentModalOpen = false;\n    this.selectedContent = null;\n    this.safeVideoUrl = null;\n  }\n  onSubmit() {\n    // Check form validity and show validation messages if invalid\n    if (this.contentForm.invalid) {\n      this.contentForm.markAllAsTouched();\n      return;\n    }\n    this.isSubmitting = true;\n    const formValue = this.contentForm.value;\n    // Prepare content data\n    const contentData = {\n      title_Content: formValue.title,\n      type_Content: formValue.type,\n      orderIndex_Content: formValue.orderIndex,\n      duration_Content: formValue.duration || 0,\n      course: {\n        id_Course: this.courseId\n      }\n    };\n    // Handle different content types\n    switch (formValue.type) {\n      case 'QUIZ':\n        contentData.description_Content = JSON.stringify({\n          title: formValue.quizTitle,\n          questions: formValue.questions\n        });\n        break;\n      case 'TEXT':\n        contentData.description_Content = formValue.description;\n        break;\n      case 'VIDEO':\n        contentData.url_Content = formValue.url;\n        break;\n      case 'PDF':\n        contentData.url_Content = formValue.url;\n        break;\n    }\n    // Determine if we're updating or creating new content\n    const save$ = this.editingContentId ? this.contentService.updateContent({\n      ...contentData,\n      id_Content: this.editingContentId\n    }) : this.contentService.addContent(contentData, this.courseId);\n    save$.subscribe({\n      next: () => {\n        this.isSubmitting = false;\n        this.resetForm();\n        this.loadContents();\n        alert('Content saved successfully!');\n      },\n      error: err => {\n        console.error('Error saving content:', err);\n        this.isSubmitting = false;\n        alert(`Error: ${err.error?.message || err.message || 'Failed to save content'}`);\n      }\n    });\n  }\n  onEditContent(content, event) {\n    event.stopPropagation();\n    this.editingContentId = content.id_Content || null;\n    // Handle quiz content\n    if (content.type_Content === 'QUIZ') {\n      try {\n        const quizData = JSON.parse(content.description_Content || '{}');\n        this.contentForm.patchValue({\n          quizTitle: quizData.title\n        });\n        // Rebuild questions form array\n        const questionsArray = this.fb.array(quizData.questions?.map(q => this.fb.group({\n          text: [q.text, Validators.required],\n          options: this.fb.array(q.options?.map(opt => this.fb.control(opt, Validators.required)) || []),\n          correctAnswer: [q.correctAnswer ?? 0, Validators.required]\n        })) || []);\n        this.contentForm.setControl('questions', questionsArray);\n      } catch (e) {\n        console.error('Error parsing quiz data:', e);\n      }\n    }\n    // Patch form values\n    this.contentForm.patchValue({\n      title: content.title_Content,\n      type: content.type_Content,\n      url: content.url_Content || '',\n      description: content.description_Content || '',\n      orderIndex: content.orderIndex_Content || 0,\n      duration: content.duration_Content || 0\n    });\n  }\n  onDeleteContent(id, event) {\n    event.stopPropagation();\n    if (confirm('Are you sure you want to delete this content?')) {\n      this.contentService.deleteContent(id).subscribe({\n        next: () => {\n          this.loadContents();\n          alert('Content deleted successfully');\n        },\n        error: err => {\n          console.error('Delete error:', err);\n          alert('Failed to delete content');\n        }\n      });\n    }\n  }\n  resetForm() {\n    this.contentForm.reset({\n      orderIndex: 0,\n      duration: 0\n    });\n    this.contentForm.setControl('questions', this.fb.array([]));\n    this.selectedFile = null;\n    this.selectedFileError = null;\n    this.editingContentId = null;\n    if (this.pdfFileInput) {\n      this.pdfFileInput.nativeElement.value = '';\n    }\n  }\n  onCancel() {\n    this.resetForm();\n  }\n};\n__decorate([ViewChild('videoPlayer')], CourseContentBComponent.prototype, \"videoPlayer\", void 0);\n__decorate([ViewChild('pdfFileInput')], CourseContentBComponent.prototype, \"pdfFileInput\", void 0);\nCourseContentBComponent = __decorate([Component({\n  selector: 'app-course-content',\n  templateUrl: './course-contentB.component.html',\n  styleUrls: ['./course-contentB.component.css']\n})], CourseContentBComponent);","map":{"version":3,"names":["Component","ViewChild","Validators","CourseContentBComponent","constructor","fb","route","router","courseService","contentService","sanitizer","contents","editingContentId","contentTypes","selectedFileError","selectedFile","selectedContent","contentType","safeVideoUrl","pdfUrl","textContent","isContentModalOpen","isSubmitting","isOwner","staticTeacherId","ngOnInit","params","subscribe","courseId","loadCourseAndContents","initForm","contentForm","group","title","required","maxLength","type","url","description","orderIndex","min","duration","quizTitle","questions","array","get","getQuestionOptions","questionIndex","at","getCourseById","course","teacherId","loadContents","error","console","getContentsByCourseId","sort","a","b","orderIndex_Content","onTypeChange","value","setControl","pdfFileInput","nativeElement","reset","onFileSelected","event","file","target","files","size","reader","FileReader","onload","e","result","patchValue","readAsDataURL","addQuestion","push","text","options","control","correctAnswer","removeQuestion","index","removeAt","addOption","removeOption","optionIndex","showContent","content","type_Content","handleVideoContent","url_Content","quizData","JSON","parse","description_Content","isYouTubeUrl","videoId","getYouTubeId","embedUrl","bypassSecurityTrustResourceUrl","includes","regExp","match","length","getSafePdfUrl","getSafeHtml","bypassSecurityTrustHtml","getCharFromCode","code","String","fromCharCode","closeContentModal","onSubmit","invalid","markAllAsTouched","formValue","contentData","title_Content","duration_Content","id_Course","stringify","save$","updateContent","id_Content","addContent","next","resetForm","alert","err","message","onEditContent","stopPropagation","questionsArray","map","q","opt","onDeleteContent","id","confirm","deleteContent","onCancel","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Sakka\\Desktop\\Prépa\\final\\dashboard-v2\\src\\app\\front-office\\courses\\couse-content\\course-contentB\\course-contentB.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';\r\nimport { Content } from '../../../models/content.model';\r\nimport { Course } from '../../../models/course.model';\r\nimport { ContentService } from '../../../services/content.service';\r\nimport { CourseService } from 'src/app/services/course.service';\r\n\r\n@Component({\r\n  selector: 'app-course-content',\r\n  templateUrl: './course-contentB.component.html',\r\n  styleUrls: ['./course-contentB.component.css']\r\n})\r\n\r\n\r\nexport class CourseContentBComponent implements OnInit {\r\n  @ViewChild('videoPlayer') videoPlayer!: ElementRef<HTMLVideoElement>;\r\n  @ViewChild('pdfFileInput') pdfFileInput!: ElementRef;\r\n\r\n  course!: Course;\r\n  contents: Content[] = [];\r\n  contentForm!: FormGroup;\r\n  courseId!: number;\r\n  editingContentId: number | null = null;\r\n  contentTypes = ['VIDEO', 'PDF', 'QUIZ', 'TEXT'];\r\n  selectedFileError: string | null = null;\r\n  selectedFile: File | null = null;\r\n\r\n  selectedContent: Content | null = null;\r\n  contentType: string = '';\r\n  safeVideoUrl: SafeResourceUrl | null = null;\r\n  pdfUrl: string = '';\r\n  quizData: any;\r\n  textContent: string = '';\r\n  isContentModalOpen: boolean = false;\r\n  isSubmitting = false;\r\n\r\n  isOwner: boolean = false;\r\n\r\n\r\n\r\n  staticTeacherId = 1;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private courseService: CourseService,\r\n    private contentService: ContentService,\r\n    private sanitizer: DomSanitizer\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(params => {\r\n      this.courseId = +params['id'];\r\n      this.loadCourseAndContents();\r\n      this.initForm();\r\n    });\r\n  }\r\n\r\n  initForm(): void {\r\n    this.contentForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.maxLength(100)]],\r\n      type: ['', Validators.required],\r\n      url: [''],\r\n      description: [''],\r\n      orderIndex: [0, [Validators.required, Validators.min(0)]],\r\n      duration: [0, [Validators.min(0)]],\r\n      quizTitle: [''],\r\n      questions: this.fb.array([])\r\n    });\r\n  }\r\n\r\n  get questions(): FormArray {\r\n    return this.contentForm.get('questions') as FormArray;\r\n  }\r\n\r\n  getQuestionOptions(questionIndex: number): FormArray {\r\n    return this.questions.at(questionIndex).get('options') as FormArray;\r\n  }\r\n\r\n  loadCourseAndContents(): void {\r\n    this.courseService.getCourseById(this.courseId).subscribe(\r\n      (course) => {\r\n        this.course = course;\r\n        this.isOwner = course.teacherId === this.staticTeacherId; // Vérifie si c'est le propriétaire\r\n        this.loadContents();\r\n      },\r\n      (error) => console.error('Error loading course:', error)\r\n    );\r\n  }\r\n  \r\n\r\n  loadContents(): void {\r\n    this.contentService.getContentsByCourseId(this.courseId).subscribe(\r\n      (contents) => {\r\n        this.contents = contents.sort((a, b) => \r\n          (a.orderIndex_Content || 0) - (b.orderIndex_Content || 0)\r\n        );\r\n      },\r\n      (error) => console.error('Error loading contents:', error)\r\n    );\r\n  }\r\n\r\n  onTypeChange(): void {\r\n    const type = this.contentForm.get('type')?.value;\r\n    \r\n    // Reset relevant fields when type changes\r\n    if (type !== 'QUIZ') {\r\n      this.contentForm.setControl('questions', this.fb.array([]));\r\n    }\r\n    if (type !== 'PDF') {\r\n      this.selectedFile = null;\r\n      this.selectedFileError = null;\r\n      if (this.pdfFileInput) {\r\n        this.pdfFileInput.nativeElement.value = '';\r\n      }\r\n    }\r\n    if (type !== 'VIDEO') {\r\n      this.contentForm.get('url')?.reset();\r\n    }\r\n    if (type !== 'TEXT') {\r\n      this.contentForm.get('description')?.reset();\r\n    }\r\n  }\r\n\r\n  onFileSelected(event: any): void {\r\n    const file: File = event.target.files[0];\r\n    if (file) {\r\n      // Validate file type\r\n      if (file.type !== 'application/pdf') {\r\n        this.selectedFileError = 'Please select a valid PDF file';\r\n        this.pdfFileInput.nativeElement.value = '';\r\n        return;\r\n      }\r\n      \r\n      // Validate file size (5MB max)\r\n      if (file.size > 5 * 1024 * 1024) {\r\n        this.selectedFileError = 'File size exceeds 5MB limit';\r\n        this.pdfFileInput.nativeElement.value = '';\r\n        return;\r\n      }\r\n\r\n      this.selectedFile = file;\r\n      const reader = new FileReader();\r\n      reader.onload = (e: any) => {\r\n        this.pdfUrl = e.target.result;\r\n        this.contentForm.patchValue({\r\n          url: e.target.result\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n      this.selectedFileError = null;\r\n    }\r\n  }\r\n\r\n  addQuestion(): void {\r\n    this.questions.push(this.fb.group({\r\n      text: ['', Validators.required],\r\n      options: this.fb.array([this.fb.control('', Validators.required)]),\r\n      correctAnswer: [0, Validators.required]\r\n    }));\r\n  }\r\n\r\n  removeQuestion(index: number): void {\r\n    this.questions.removeAt(index);\r\n  }\r\n\r\n  addOption(questionIndex: number): void {\r\n    this.getQuestionOptions(questionIndex).push(this.fb.control('', Validators.required));\r\n  }\r\n\r\n  removeOption(questionIndex: number, optionIndex: number): void {\r\n    this.getQuestionOptions(questionIndex).removeAt(optionIndex);\r\n  }\r\n\r\n  showContent(content: Content): void {\r\n    this.selectedContent = content;\r\n    this.contentType = content.type_Content;\r\n    this.isContentModalOpen = true;\r\n\r\n    switch(content.type_Content) {\r\n      case 'VIDEO':\r\n        this.handleVideoContent(content.url_Content);\r\n        break;\r\n      case 'PDF':\r\n        this.pdfUrl = content.url_Content || '';\r\n        break;\r\n      case 'QUIZ':\r\n        try {\r\n          this.quizData = JSON.parse(content.description_Content || '{}');\r\n        } catch {\r\n          this.quizData = { title: 'Quiz', questions: [] };\r\n        }\r\n        break;\r\n      case 'TEXT':\r\n        this.textContent = content.description_Content || '';\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleVideoContent(url: string = ''): void {\r\n    if (this.isYouTubeUrl(url)) {\r\n      const videoId = this.getYouTubeId(url);\r\n      const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1`;\r\n      this.safeVideoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(embedUrl);\r\n    } else {\r\n      this.safeVideoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n    }\r\n  }\r\n\r\n  public isYouTubeUrl(url: string): boolean {\r\n    return url?.includes('youtube.com') || url?.includes('youtu.be');\r\n  }\r\n\r\n  private getYouTubeId(url: string): string {\r\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\r\n    const match = url.match(regExp);\r\n    return (match && match[2].length === 11) ? match[2] : '';\r\n  }\r\n\r\n  public getSafePdfUrl(url: string): SafeResourceUrl {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n\r\n  public getSafeHtml(content: string): SafeHtml {\r\n    return this.sanitizer.bypassSecurityTrustHtml(content);\r\n  }\r\n\r\n  public getCharFromCode(code: number): string {\r\n    return String.fromCharCode(code);\r\n  }\r\n\r\n  closeContentModal(): void {\r\n    this.isContentModalOpen = false;\r\n    this.selectedContent = null;\r\n    this.safeVideoUrl = null;\r\n  }\r\n\r\n  onSubmit(): void {\r\n    // Check form validity and show validation messages if invalid\r\n    if (this.contentForm.invalid) {\r\n      this.contentForm.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    this.isSubmitting = true;\r\n    const formValue = this.contentForm.value;\r\n    \r\n    // Prepare content data\r\n    const contentData: any = {\r\n      title_Content: formValue.title,\r\n      type_Content: formValue.type,\r\n      orderIndex_Content: formValue.orderIndex,\r\n      duration_Content: formValue.duration || 0,\r\n      course: { id_Course: this.courseId }\r\n    };\r\n\r\n    // Handle different content types\r\n    switch(formValue.type) {\r\n      case 'QUIZ':\r\n        contentData.description_Content = JSON.stringify({\r\n          title: formValue.quizTitle,\r\n          questions: formValue.questions\r\n        });\r\n        break;\r\n      case 'TEXT':\r\n        contentData.description_Content = formValue.description;\r\n        break;\r\n      case 'VIDEO':\r\n        contentData.url_Content = formValue.url;\r\n        break;\r\n      case 'PDF':\r\n        contentData.url_Content = formValue.url;\r\n        break;\r\n    }\r\n\r\n    // Determine if we're updating or creating new content\r\n    const save$ = this.editingContentId\r\n      ? this.contentService.updateContent({\r\n          ...contentData,\r\n          id_Content: this.editingContentId\r\n        })\r\n      : this.contentService.addContent(contentData,this.courseId);\r\n\r\n    save$.subscribe({\r\n      next: () => {\r\n        this.isSubmitting = false;\r\n        this.resetForm();\r\n        this.loadContents();\r\n        alert('Content saved successfully!');\r\n      },\r\n      error: (err) => {\r\n        console.error('Error saving content:', err);\r\n        this.isSubmitting = false;\r\n        alert(`Error: ${err.error?.message || err.message || 'Failed to save content'}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  onEditContent(content: Content, event: Event): void {\r\n    event.stopPropagation();\r\n    this.editingContentId = content.id_Content || null;\r\n    \r\n    // Handle quiz content\r\n    if (content.type_Content === 'QUIZ') {\r\n      try {\r\n        const quizData = JSON.parse(content.description_Content || '{}');\r\n        this.contentForm.patchValue({\r\n          quizTitle: quizData.title\r\n        });\r\n        \r\n        // Rebuild questions form array\r\n        const questionsArray = this.fb.array(\r\n          quizData.questions?.map((q: any) => \r\n            this.fb.group({\r\n              text: [q.text, Validators.required],\r\n              options: this.fb.array(\r\n                q.options?.map((opt: string) => \r\n                  this.fb.control(opt, Validators.required)\r\n                ) || []\r\n              ),\r\n              correctAnswer: [q.correctAnswer ?? 0, Validators.required]\r\n            })\r\n          ) || []\r\n        );\r\n        \r\n        this.contentForm.setControl('questions', questionsArray);\r\n      } catch (e) {\r\n        console.error('Error parsing quiz data:', e);\r\n      }\r\n    }\r\n    \r\n    // Patch form values\r\n    this.contentForm.patchValue({\r\n      title: content.title_Content,\r\n      type: content.type_Content,\r\n      url: content.url_Content || '',\r\n      description: content.description_Content || '',\r\n      orderIndex: content.orderIndex_Content || 0,\r\n      duration: content.duration_Content || 0\r\n    });\r\n  }\r\n\r\n  onDeleteContent(id: number, event: Event): void {\r\n    event.stopPropagation();\r\n    if (confirm('Are you sure you want to delete this content?')) {\r\n      this.contentService.deleteContent(id).subscribe({\r\n        next: () => {\r\n          this.loadContents();\r\n          alert('Content deleted successfully');\r\n        },\r\n        error: (err) => {\r\n          console.error('Delete error:', err);\r\n          alert('Failed to delete content');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.contentForm.reset({\r\n      orderIndex: 0,\r\n      duration: 0\r\n    });\r\n    this.contentForm.setControl('questions', this.fb.array([]));\r\n    this.selectedFile = null;\r\n    this.selectedFileError = null;\r\n    this.editingContentId = null;\r\n    if (this.pdfFileInput) {\r\n      this.pdfFileInput.nativeElement.value = '';\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.resetForm();\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}