{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n  script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n  if (nonce) {\n    script.nonce = nonce;\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\nconst loader = {\n  loadScript\n};\nclass RecaptchaLoaderService {\n  constructor(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, language, baseUrl, nonce, v3SiteKey) {\n    this.platformId = platformId;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n  }\n  /** @internal */\n  init() {\n    if (RecaptchaLoaderService.ready) {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      const subject = new BehaviorSubject(null);\n      RecaptchaLoaderService.ready = subject;\n      const langParam = this.language ? \"&hl=\" + this.language : \"\";\n      const renderMode = this.v3SiteKey || \"explicit\";\n      loader.loadScript(renderMode, grecaptcha => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n    }\n  }\n}\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService.ɵfac = function RecaptchaLoaderService_Factory(t) {\n  return new (t || RecaptchaLoaderService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), i0.ɵɵinject(RECAPTCHA_BASE_URL, 8), i0.ɵɵinject(RECAPTCHA_NONCE, 8), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY, 8));\n};\nRecaptchaLoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RecaptchaLoaderService,\n  factory: RecaptchaLoaderService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaLoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }];\n  }, null);\n})();\nlet nextId = 0;\nclass RecaptchaComponent {\n  constructor(elementRef, loader, zone, settings) {\n    this.elementRef = elementRef;\n    this.loader = loader;\n    this.zone = zone;\n    this.id = `ngrecaptcha-${nextId++}`;\n    this.errorMode = \"default\";\n    this.resolved = new EventEmitter();\n    // The rename will happen a bit later\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    this.error = new EventEmitter();\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n  ngAfterViewInit() {\n    this.subscription = this.loader.ready.subscribe(grecaptcha => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n  ngOnDestroy() {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  execute() {\n    if (this.size !== \"invisible\") {\n      return;\n    }\n    if (this.widget != null) {\n      this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n  reset() {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n      this.grecaptchaReset();\n    }\n  }\n  /**\n   * ⚠️ Warning! Use this property at your own risk!\n   *\n   * While this member is `public`, it is not a part of the component's public API.\n   * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n   * You are **strongly advised** against using this property.\n   * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n   */\n  get __unsafe_widgetValue() {\n    return this.widget != null ? this.grecaptcha.getResponse(this.widget) : null;\n  }\n  /** @internal */\n  expired() {\n    this.resolved.emit(null);\n  }\n  /** @internal */\n  errored(args) {\n    this.error.emit(args);\n  }\n  /** @internal */\n  captchaResponseCallback(response) {\n    this.resolved.emit(response);\n  }\n  /** @internal */\n  grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n  /** @internal */\n  renderRecaptcha() {\n    // This `any` can be removed after @types/grecaptcha get updated\n    const renderOptions = {\n      badge: this.badge,\n      callback: response => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      \"expired-callback\": () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type\n    };\n    if (this.errorMode === \"handled\") {\n      renderOptions[\"error-callback\"] = (...args) => {\n        this.zone.run(() => this.errored(args));\n      };\n    }\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n}\nRecaptchaComponent.ɵfac = function RecaptchaComponent_Factory(t) {\n  return new (t || RecaptchaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(RecaptchaLoaderService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8));\n};\nRecaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RecaptchaComponent,\n  selectors: [[\"re-captcha\"]],\n  hostVars: 1,\n  hostBindings: function RecaptchaComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    siteKey: \"siteKey\",\n    theme: \"theme\",\n    type: \"type\",\n    size: \"size\",\n    tabIndex: \"tabIndex\",\n    badge: \"badge\",\n    errorMode: \"errorMode\"\n  },\n  outputs: {\n    resolved: \"resolved\",\n    error: \"error\"\n  },\n  exportAs: [\"reCaptcha\"],\n  decls: 0,\n  vars: 0,\n  template: function RecaptchaComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaComponent, [{\n    type: Component,\n    args: [{\n      exportAs: \"reCaptcha\",\n      selector: \"re-captcha\",\n      template: ``\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: RecaptchaLoaderService\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_SETTINGS]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: [\"attr.id\"]\n    }],\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    errorMode: [{\n      type: Input\n    }],\n    resolved: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }]\n  });\n})();\nclass RecaptchaCommonModule {}\nRecaptchaCommonModule.ɵfac = function RecaptchaCommonModule_Factory(t) {\n  return new (t || RecaptchaCommonModule)();\n};\nRecaptchaCommonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaCommonModule\n});\nRecaptchaCommonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaCommonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaComponent],\n      exports: [RecaptchaComponent]\n    }]\n  }], null, null);\n})();\nclass RecaptchaModule {}\nRecaptchaModule.ɵfac = function RecaptchaModule_Factory(t) {\n  return new (t || RecaptchaModule)();\n};\nRecaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaModule\n});\nRecaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RecaptchaLoaderService],\n  imports: [[RecaptchaCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RecaptchaComponent],\n      imports: [RecaptchaCommonModule],\n      providers: [RecaptchaLoaderService]\n    }]\n  }], null, null);\n})();\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n  constructor(zone, siteKey,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, baseUrl, nonce, language) {\n    /** @internal */\n    this.onLoadComplete = grecaptcha => {\n      this.grecaptcha = grecaptcha;\n      if (this.actionBacklog && this.actionBacklog.length > 0) {\n        this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n        this.actionBacklog = undefined;\n      }\n    };\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.init();\n  }\n  get onExecute() {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n    return this.onExecuteObservable;\n  }\n  get onExecuteError() {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n    return this.onExecuteErrorObservable;\n  }\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  execute(action) {\n    const subject = new Subject();\n    if (this.isBrowser) {\n      if (!this.grecaptcha) {\n        // todo: add to array of later executions\n        if (!this.actionBacklog) {\n          this.actionBacklog = [];\n        }\n        this.actionBacklog.push([action, subject]);\n      } else {\n        this.executeActionWithSubject(action, subject);\n      }\n    }\n    return subject.asObservable();\n  }\n  /** @internal */\n  executeActionWithSubject(action, subject) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onError = error => {\n      this.zone.run(() => {\n        subject.error(error);\n        if (this.onExecuteErrorSubject) {\n          // We don't know any better at this point, unfortunately, so have to resort to `any`\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this.onExecuteErrorSubject.next({\n            action,\n            error\n          });\n        }\n      });\n    };\n    this.zone.runOutsideAngular(() => {\n      try {\n        this.grecaptcha.execute(this.siteKey, {\n          action\n        }).then(token => {\n          this.zone.run(() => {\n            subject.next(token);\n            subject.complete();\n            if (this.onExecuteSubject) {\n              this.onExecuteSubject.next({\n                action,\n                token\n              });\n            }\n          });\n        }, onError);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }\n  /** @internal */\n  init() {\n    if (this.isBrowser) {\n      if (\"grecaptcha\" in window) {\n        this.grecaptcha = grecaptcha;\n      } else {\n        const langParam = this.language ? \"&hl=\" + this.language : \"\";\n        loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n      }\n    }\n  }\n}\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n  return new (t || ReCaptchaV3Service)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(RECAPTCHA_BASE_URL, 8), i0.ɵɵinject(RECAPTCHA_NONCE, 8), i0.ɵɵinject(RECAPTCHA_LANGUAGE, 8));\n};\nReCaptchaV3Service.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ReCaptchaV3Service,\n  factory: ReCaptchaV3Service.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }];\n  }, null);\n})();\nclass RecaptchaV3Module {}\nRecaptchaV3Module.ɵfac = function RecaptchaV3Module_Factory(t) {\n  return new (t || RecaptchaV3Module)();\n};\nRecaptchaV3Module.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaV3Module\n});\nRecaptchaV3Module.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ReCaptchaV3Service]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaV3Module, [{\n    type: NgModule,\n    args: [{\n      providers: [ReCaptchaV3Service]\n    }]\n  }], null, null);\n})();\nclass RecaptchaValueAccessorDirective {\n  constructor(host) {\n    this.host = host;\n    this.requiresControllerReset = false;\n  }\n  writeValue(value) {\n    if (!value) {\n      this.host.reset();\n    } else {\n      // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n      // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n      // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n      // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n      // we'll be telling the controller to \"reset\" the value back to null.\n      if (this.host.__unsafe_widgetValue !== value && Boolean(this.host.__unsafe_widgetValue) === false) {\n        this.requiresControllerReset = true;\n      }\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n    if (this.requiresControllerReset) {\n      this.requiresControllerReset = false;\n      this.onChange(null);\n    }\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  onResolve($event) {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n}\nRecaptchaValueAccessorDirective.ɵfac = function RecaptchaValueAccessorDirective_Factory(t) {\n  return new (t || RecaptchaValueAccessorDirective)(i0.ɵɵdirectiveInject(RecaptchaComponent));\n};\nRecaptchaValueAccessorDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: RecaptchaValueAccessorDirective,\n  selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]],\n  hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) {\n        return ctx.onResolve($event);\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n      }],\n      selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\"\n    }]\n  }], function () {\n    return [{\n      type: RecaptchaComponent\n    }];\n  }, {\n    onResolve: [{\n      type: HostListener,\n      args: [\"resolved\", [\"$event\"]]\n    }]\n  });\n})();\nclass RecaptchaFormsModule {}\nRecaptchaFormsModule.ɵfac = function RecaptchaFormsModule_Factory(t) {\n  return new (t || RecaptchaFormsModule)();\n};\nRecaptchaFormsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaFormsModule\n});\nRecaptchaFormsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[FormsModule, RecaptchaCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaFormsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaValueAccessorDirective],\n      exports: [RecaptchaValueAccessorDirective],\n      imports: [FormsModule, RecaptchaCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective };","map":{"version":3,"names":["i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","EventEmitter","Component","Input","HostBinding","Output","NgModule","forwardRef","Directive","HostListener","isPlatformBrowser","of","BehaviorSubject","Subject","NG_VALUE_ACCESSOR","FormsModule","RECAPTCHA_LANGUAGE","RECAPTCHA_BASE_URL","RECAPTCHA_NONCE","RECAPTCHA_SETTINGS","RECAPTCHA_V3_SITE_KEY","loadScript","renderMode","onLoaded","urlParams","url","nonce","window","ng2recaptchaloaded","grecaptcha","script","document","createElement","innerHTML","baseUrl","src","async","defer","head","appendChild","loader","RecaptchaLoaderService","constructor","platformId","language","v3SiteKey","init","ready","asObservable","subject","langParam","next","ɵfac","RecaptchaLoaderService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","Object","decorators","args","undefined","nextId","RecaptchaComponent","elementRef","zone","settings","id","errorMode","resolved","error","siteKey","theme","size","badge","ngAfterViewInit","subscription","subscribe","render","Function","renderRecaptcha","ngOnDestroy","grecaptchaReset","unsubscribe","execute","widget","executeRequested","reset","getResponse","emit","__unsafe_widgetValue","expired","errored","captchaResponseCallback","response","runOutsideAngular","renderOptions","callback","run","expired-callback","sitekey","tabindex","tabIndex","nativeElement","RecaptchaComponent_Factory","ɵɵdirectiveInject","ElementRef","NgZone","ɵcmp","ɵɵdefineComponent","selectors","hostVars","hostBindings","RecaptchaComponent_HostBindings","rf","ctx","ɵɵattribute","inputs","outputs","exportAs","decls","vars","template","RecaptchaComponent_Template","encapsulation","selector","RecaptchaCommonModule","RecaptchaCommonModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","exports","RecaptchaModule","RecaptchaModule_Factory","providers","imports","ReCaptchaV3Service","onLoadComplete","actionBacklog","length","forEach","action","executeActionWithSubject","isBrowser","onExecute","onExecuteSubject","onExecuteObservable","onExecuteError","onExecuteErrorSubject","onExecuteErrorObservable","push","onError","then","complete","e","ReCaptchaV3Service_Factory","RecaptchaV3Module","RecaptchaV3Module_Factory","RecaptchaValueAccessorDirective","host","requiresControllerReset","writeValue","value","Boolean","registerOnChange","fn","onChange","registerOnTouched","onTouched","onResolve","$event","RecaptchaValueAccessorDirective_Factory","ɵdir","ɵɵdefineDirective","RecaptchaValueAccessorDirective_HostBindings","ɵɵlistener","RecaptchaValueAccessorDirective_resolved_HostBindingHandler","features","ɵɵProvidersFeature","multi","provide","useExisting","RecaptchaFormsModule","RecaptchaFormsModule_Factory"],"sources":["D:/4 ARCTIC YOUSSEF/PI/user+event+course/PI/final/dashboard-v2/node_modules/ng-recaptcha/fesm2020/ng-recaptcha.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement(\"script\");\n    script.innerHTML = \"\";\n    const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nconst loader = { loadScript };\n\nclass RecaptchaLoaderService {\n    constructor(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, language, baseUrl, nonce, v3SiteKey) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.v3SiteKey = v3SiteKey;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId)\n            ? RecaptchaLoaderService.ready.asObservable()\n            : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService.ready = subject;\n            const langParam = this.language ? \"&hl=\" + this.language : \"\";\n            const renderMode = this.v3SiteKey || \"explicit\";\n            loader.loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n}\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaLoaderService, deps: [{ token: PLATFORM_ID }, { token: RECAPTCHA_LANGUAGE, optional: true }, { token: RECAPTCHA_BASE_URL, optional: true }, { token: RECAPTCHA_NONCE, optional: true }, { token: RECAPTCHA_V3_SITE_KEY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nRecaptchaLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaLoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaLoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_LANGUAGE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_BASE_URL]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_NONCE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_V3_SITE_KEY]\n                }] }]; } });\n\nlet nextId = 0;\nclass RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.errorMode = \"default\";\n        this.resolved = new EventEmitter();\n        // The rename will happen a bit later\n        // eslint-disable-next-line @angular-eslint/no-output-native\n        this.error = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== \"invisible\") {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /**\n     * ⚠️ Warning! Use this property at your own risk!\n     *\n     * While this member is `public`, it is not a part of the component's public API.\n     * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n     * You are **strongly advised** against using this property.\n     * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n     */\n    get __unsafe_widgetValue() {\n        return this.widget != null\n            ? this.grecaptcha.getResponse(this.widget)\n            : null;\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    errored(args) {\n        this.error.emit(args);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        // This `any` can be removed after @types/grecaptcha get updated\n        const renderOptions = {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            \"expired-callback\": () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        };\n        if (this.errorMode === \"handled\") {\n            renderOptions[\"error-callback\"] = (...args) => {\n                this.zone.run(() => this.errored(args));\n            };\n        }\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n}\nRecaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaComponent, deps: [{ token: i0.ElementRef }, { token: RecaptchaLoaderService }, { token: i0.NgZone }, { token: RECAPTCHA_SETTINGS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nRecaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0\", type: RecaptchaComponent, selector: \"re-captcha\", inputs: { id: \"id\", siteKey: \"siteKey\", theme: \"theme\", type: \"type\", size: \"size\", tabIndex: \"tabIndex\", badge: \"badge\", errorMode: \"errorMode\" }, outputs: { resolved: \"resolved\", error: \"error\" }, host: { properties: { \"attr.id\": \"this.id\" } }, exportAs: [\"reCaptcha\"], ngImport: i0, template: ``, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    exportAs: \"reCaptcha\",\n                    selector: \"re-captcha\",\n                    template: ``,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: RecaptchaLoaderService }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_SETTINGS]\n                }] }]; }, propDecorators: { id: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: [\"attr.id\"]\n            }], siteKey: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], badge: [{\n                type: Input\n            }], errorMode: [{\n                type: Input\n            }], resolved: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }] } });\n\nclass RecaptchaCommonModule {\n}\nRecaptchaCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule, declarations: [RecaptchaComponent], exports: [RecaptchaComponent] });\nRecaptchaCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RecaptchaComponent],\n                    exports: [RecaptchaComponent],\n                }]\n        }] });\n\nclass RecaptchaModule {\n}\nRecaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, imports: [RecaptchaCommonModule], exports: [RecaptchaComponent] });\nRecaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, providers: [RecaptchaLoaderService], imports: [[RecaptchaCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [RecaptchaComponent],\n                    imports: [RecaptchaCommonModule],\n                    providers: [RecaptchaLoaderService],\n                }]\n        }] });\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, baseUrl, nonce, language) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    get onExecuteError() {\n        if (!this.onExecuteErrorSubject) {\n            this.onExecuteErrorSubject = new Subject();\n            this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n        }\n        return this.onExecuteErrorObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const onError = (error) => {\n            this.zone.run(() => {\n                subject.error(error);\n                if (this.onExecuteErrorSubject) {\n                    // We don't know any better at this point, unfortunately, so have to resort to `any`\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    this.onExecuteErrorSubject.next({ action, error });\n                }\n            });\n        };\n        this.zone.runOutsideAngular(() => {\n            try {\n                this.grecaptcha\n                    .execute(this.siteKey, { action })\n                    .then((token) => {\n                    this.zone.run(() => {\n                        subject.next(token);\n                        subject.complete();\n                        if (this.onExecuteSubject) {\n                            this.onExecuteSubject.next({ action, token });\n                        }\n                    });\n                }, onError);\n            }\n            catch (e) {\n                onError(e);\n            }\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if (\"grecaptcha\" in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                const langParam = this.language ? \"&hl=\" + this.language : \"\";\n                loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n            }\n        }\n    }\n}\nReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: i0.NgZone }, { token: RECAPTCHA_V3_SITE_KEY }, { token: PLATFORM_ID }, { token: RECAPTCHA_BASE_URL, optional: true }, { token: RECAPTCHA_NONCE, optional: true }, { token: RECAPTCHA_LANGUAGE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ReCaptchaV3Service });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [RECAPTCHA_V3_SITE_KEY]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_BASE_URL]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_NONCE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_LANGUAGE]\n                }] }]; } });\n\nclass RecaptchaV3Module {\n}\nRecaptchaV3Module.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaV3Module.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module });\nRecaptchaV3Module.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module, providers: [ReCaptchaV3Service] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [ReCaptchaV3Service],\n                }]\n        }] });\n\nclass RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n        this.requiresControllerReset = false;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n        else {\n            // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n            // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n            // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n            // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n            // we'll be telling the controller to \"reset\" the value back to null.\n            if (this.host.__unsafe_widgetValue !== value &&\n                Boolean(this.host.__unsafe_widgetValue) === false) {\n                this.requiresControllerReset = true;\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n        if (this.requiresControllerReset) {\n            this.requiresControllerReset = false;\n            this.onChange(null);\n        }\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n}\nRecaptchaValueAccessorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaValueAccessorDirective, deps: [{ token: RecaptchaComponent }], target: i0.ɵɵFactoryTarget.Directive });\nRecaptchaValueAccessorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: RecaptchaValueAccessorDirective, selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\", host: { listeners: { \"resolved\": \"onResolve($event)\" } }, providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n        },\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaValueAccessorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    providers: [\n                        {\n                            multi: true,\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n                        },\n                    ],\n                    selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\",\n                }]\n        }], ctorParameters: function () { return [{ type: RecaptchaComponent }]; }, propDecorators: { onResolve: [{\n                type: HostListener,\n                args: [\"resolved\", [\"$event\"]]\n            }] } });\n\nclass RecaptchaFormsModule {\n}\nRecaptchaFormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, declarations: [RecaptchaValueAccessorDirective], imports: [FormsModule, RecaptchaCommonModule], exports: [RecaptchaValueAccessorDirective] });\nRecaptchaFormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, imports: [[FormsModule, RecaptchaCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RecaptchaValueAccessorDirective],\n                    exports: [RecaptchaValueAccessorDirective],\n                    imports: [FormsModule, RecaptchaCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,cAAc,EAAEC,WAAW,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,EAAEC,YAAY,QAAQ,eAAe;AAC7L,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,EAAE,EAAEC,eAAe,EAAEC,OAAO,QAAQ,MAAM;AACnD,SAASC,iBAAiB,EAAEC,WAAW,QAAQ,gBAAgB;AAE/D,MAAMC,kBAAkB,GAAG,IAAIpB,cAAc,CAAC,oBAAoB,CAAC;AACnE,MAAMqB,kBAAkB,GAAG,IAAIrB,cAAc,CAAC,oBAAoB,CAAC;AACnE,MAAMsB,eAAe,GAAG,IAAItB,cAAc,CAAC,qBAAqB,CAAC;AACjE,MAAMuB,kBAAkB,GAAG,IAAIvB,cAAc,CAAC,oBAAoB,CAAC;AACnE,MAAMwB,qBAAqB,GAAG,IAAIxB,cAAc,CAAC,uBAAuB,CAAC;AAEzE,SAASyB,UAAUA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAC7DC,MAAM,CAACC,kBAAkB,GAAG,MAAM;IAC9BL,QAAQ,CAACM,UAAU,CAAC;EACxB,CAAC;EACD,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CF,MAAM,CAACG,SAAS,GAAG,EAAE;EACrB,MAAMC,OAAO,GAAGT,GAAG,IAAI,yCAAyC;EAChEK,MAAM,CAACK,GAAG,GAAI,GAAED,OAAQ,WAAUZ,UAAW,6BAA4BE,SAAU,EAAC;EACpF,IAAIE,KAAK,EAAE;IACPI,MAAM,CAACJ,KAAK,GAAGA,KAAK;EACxB;EACAI,MAAM,CAACM,KAAK,GAAG,IAAI;EACnBN,MAAM,CAACO,KAAK,GAAG,IAAI;EACnBN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,MAAM,CAAC;AACrC;AACA,MAAMU,MAAM,GAAG;EAAEnB;AAAW,CAAC;AAE7B,MAAMoB,sBAAsB,CAAC;EACzBC,WAAWA;EACX;EACAC,UAAU,EAAEC,QAAQ,EAAEV,OAAO,EAAER,KAAK,EAAEmB,SAAS,EAAE;IAC7C,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACV,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACR,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACmB,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,IAAI,CAAC,CAAC;IACX,IAAI,CAACC,KAAK,GAAGrC,iBAAiB,CAAC,IAAI,CAACiC,UAAU,CAAC,GACzCF,sBAAsB,CAACM,KAAK,CAACC,YAAY,CAAC,CAAC,GAC3CrC,EAAE,CAAC,CAAC;EACd;EACA;EACAmC,IAAIA,CAAA,EAAG;IACH,IAAIL,sBAAsB,CAACM,KAAK,EAAE;MAC9B;IACJ;IACA,IAAIrC,iBAAiB,CAAC,IAAI,CAACiC,UAAU,CAAC,EAAE;MACpC,MAAMM,OAAO,GAAG,IAAIrC,eAAe,CAAC,IAAI,CAAC;MACzC6B,sBAAsB,CAACM,KAAK,GAAGE,OAAO;MACtC,MAAMC,SAAS,GAAG,IAAI,CAACN,QAAQ,GAAG,MAAM,GAAG,IAAI,CAACA,QAAQ,GAAG,EAAE;MAC7D,MAAMtB,UAAU,GAAG,IAAI,CAACuB,SAAS,IAAI,UAAU;MAC/CL,MAAM,CAACnB,UAAU,CAACC,UAAU,EAAGO,UAAU,IAAKoB,OAAO,CAACE,IAAI,CAACtB,UAAU,CAAC,EAAEqB,SAAS,EAAE,IAAI,CAAChB,OAAO,EAAE,IAAI,CAACR,KAAK,CAAC;IAChH;EACJ;AACJ;AACA;AACA;AACA;AACA;AACAe,sBAAsB,CAACM,KAAK,GAAG,IAAI;AACnCN,sBAAsB,CAACW,IAAI,YAAAC,+BAAAC,CAAA;EAAA,YAAAA,CAAA,IAAwFb,sBAAsB,EAAhC9C,EAAE,CAAA4D,QAAA,CAAgD1D,WAAW,GAA7DF,EAAE,CAAA4D,QAAA,CAAwEvC,kBAAkB,MAA5FrB,EAAE,CAAA4D,QAAA,CAAuHtC,kBAAkB,MAA3ItB,EAAE,CAAA4D,QAAA,CAAsKrC,eAAe,MAAvLvB,EAAE,CAAA4D,QAAA,CAAkNnC,qBAAqB;AAAA,CAA6D;AAC/YqB,sBAAsB,CAACe,KAAK,kBAD6E7D,EAAE,CAAA8D,kBAAA;EAAAC,KAAA,EACYjB,sBAAsB;EAAAkB,OAAA,EAAtBlB,sBAAsB,CAAAW;AAAA,EAAG;AAChJ;EAAA,QAAAQ,SAAA,oBAAAA,SAAA,KAFyGjE,EAAE,CAAAkE,iBAAA,CAEhBpB,sBAAsB,EAAc,CAAC;IACpHqB,IAAI,EAAEhE;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEgE,IAAI,EAAEC,MAAM;MAAEC,UAAU,EAAE,CAAC;QAC3DF,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAACpE,WAAW;MACtB,CAAC;IAAE,CAAC,EAAE;MAAEiE,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAClCF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAACjD,kBAAkB;MAC7B,CAAC;IAAE,CAAC,EAAE;MAAE8C,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAClCF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAAChD,kBAAkB;MAC7B,CAAC;IAAE,CAAC,EAAE;MAAE6C,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAClCF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAAC/C,eAAe;MAC1B,CAAC;IAAE,CAAC,EAAE;MAAE4C,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAClCF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAAC7C,qBAAqB;MAChC,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC;AAAA;AAExB,IAAI+C,MAAM,GAAG,CAAC;AACd,MAAMC,kBAAkB,CAAC;EACrB1B,WAAWA,CAAC2B,UAAU,EAAE7B,MAAM,EAAE8B,IAAI,EAAEC,QAAQ,EAAE;IAC5C,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAAC7B,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC8B,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,EAAE,GAAI,eAAcL,MAAM,EAAG,EAAC;IACnC,IAAI,CAACM,SAAS,GAAG,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAG,IAAIzE,YAAY,CAAC,CAAC;IAClC;IACA;IACA,IAAI,CAAC0E,KAAK,GAAG,IAAI1E,YAAY,CAAC,CAAC;IAC/B,IAAIsE,QAAQ,EAAE;MACV,IAAI,CAACK,OAAO,GAAGL,QAAQ,CAACK,OAAO;MAC/B,IAAI,CAACC,KAAK,GAAGN,QAAQ,CAACM,KAAK;MAC3B,IAAI,CAACf,IAAI,GAAGS,QAAQ,CAACT,IAAI;MACzB,IAAI,CAACgB,IAAI,GAAGP,QAAQ,CAACO,IAAI;MACzB,IAAI,CAACC,KAAK,GAAGR,QAAQ,CAACQ,KAAK;IAC/B;EACJ;EACAC,eAAeA,CAAA,EAAG;IACd,IAAI,CAACC,YAAY,GAAG,IAAI,CAACzC,MAAM,CAACO,KAAK,CAACmC,SAAS,CAAErD,UAAU,IAAK;MAC5D,IAAIA,UAAU,IAAI,IAAI,IAAIA,UAAU,CAACsD,MAAM,YAAYC,QAAQ,EAAE;QAC7D,IAAI,CAACvD,UAAU,GAAGA,UAAU;QAC5B,IAAI,CAACwD,eAAe,CAAC,CAAC;MAC1B;IACJ,CAAC,CAAC;EACN;EACAC,WAAWA,CAAA,EAAG;IACV;IACA;IACA,IAAI,CAACC,eAAe,CAAC,CAAC;IACtB,IAAI,IAAI,CAACN,YAAY,EAAE;MACnB,IAAI,CAACA,YAAY,CAACO,WAAW,CAAC,CAAC;IACnC;EACJ;EACA;AACJ;AACA;AACA;EACIC,OAAOA,CAAA,EAAG;IACN,IAAI,IAAI,CAACX,IAAI,KAAK,WAAW,EAAE;MAC3B;IACJ;IACA,IAAI,IAAI,CAACY,MAAM,IAAI,IAAI,EAAE;MACrB,IAAI,CAAC7D,UAAU,CAAC4D,OAAO,CAAC,IAAI,CAACC,MAAM,CAAC;IACxC,CAAC,MACI;MACD;MACA,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAChC;EACJ;EACAC,KAAKA,CAAA,EAAG;IACJ,IAAI,IAAI,CAACF,MAAM,IAAI,IAAI,EAAE;MACrB,IAAI,IAAI,CAAC7D,UAAU,CAACgE,WAAW,CAAC,IAAI,CAACH,MAAM,CAAC,EAAE;QAC1C;QACA;QACA;QACA,IAAI,CAAChB,QAAQ,CAACoB,IAAI,CAAC,IAAI,CAAC;MAC5B;MACA,IAAI,CAACP,eAAe,CAAC,CAAC;IAC1B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIQ,oBAAoBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACL,MAAM,IAAI,IAAI,GACpB,IAAI,CAAC7D,UAAU,CAACgE,WAAW,CAAC,IAAI,CAACH,MAAM,CAAC,GACxC,IAAI;EACd;EACA;EACAM,OAAOA,CAAA,EAAG;IACN,IAAI,CAACtB,QAAQ,CAACoB,IAAI,CAAC,IAAI,CAAC;EAC5B;EACA;EACAG,OAAOA,CAAChC,IAAI,EAAE;IACV,IAAI,CAACU,KAAK,CAACmB,IAAI,CAAC7B,IAAI,CAAC;EACzB;EACA;EACAiC,uBAAuBA,CAACC,QAAQ,EAAE;IAC9B,IAAI,CAACzB,QAAQ,CAACoB,IAAI,CAACK,QAAQ,CAAC;EAChC;EACA;EACAZ,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAACG,MAAM,IAAI,IAAI,EAAE;MACrB,IAAI,CAACpB,IAAI,CAAC8B,iBAAiB,CAAC,MAAM,IAAI,CAACvE,UAAU,CAAC+D,KAAK,CAAC,IAAI,CAACF,MAAM,CAAC,CAAC;IACzE;EACJ;EACA;EACAL,eAAeA,CAAA,EAAG;IACd;IACA,MAAMgB,aAAa,GAAG;MAClBtB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBuB,QAAQ,EAAGH,QAAQ,IAAK;QACpB,IAAI,CAAC7B,IAAI,CAACiC,GAAG,CAAC,MAAM,IAAI,CAACL,uBAAuB,CAACC,QAAQ,CAAC,CAAC;MAC/D,CAAC;MACD,kBAAkB,EAAEK,CAAA,KAAM;QACtB,IAAI,CAAClC,IAAI,CAACiC,GAAG,CAAC,MAAM,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC;MACvC,CAAC;MACDS,OAAO,EAAE,IAAI,CAAC7B,OAAO;MACrBE,IAAI,EAAE,IAAI,CAACA,IAAI;MACf4B,QAAQ,EAAE,IAAI,CAACC,QAAQ;MACvB9B,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBf,IAAI,EAAE,IAAI,CAACA;IACf,CAAC;IACD,IAAI,IAAI,CAACW,SAAS,KAAK,SAAS,EAAE;MAC9B4B,aAAa,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAGpC,IAAI,KAAK;QAC3C,IAAI,CAACK,IAAI,CAACiC,GAAG,CAAC,MAAM,IAAI,CAACN,OAAO,CAAChC,IAAI,CAAC,CAAC;MAC3C,CAAC;IACL;IACA,IAAI,CAACyB,MAAM,GAAG,IAAI,CAAC7D,UAAU,CAACsD,MAAM,CAAC,IAAI,CAACd,UAAU,CAACuC,aAAa,EAAEP,aAAa,CAAC;IAClF,IAAI,IAAI,CAACV,gBAAgB,KAAK,IAAI,EAAE;MAChC,IAAI,CAACA,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACF,OAAO,CAAC,CAAC;IAClB;EACJ;AACJ;AACArB,kBAAkB,CAAChB,IAAI,YAAAyD,2BAAAvD,CAAA;EAAA,YAAAA,CAAA,IAAwFc,kBAAkB,EAxJxBzE,EAAE,CAAAmH,iBAAA,CAwJwCnH,EAAE,CAACoH,UAAU,GAxJvDpH,EAAE,CAAAmH,iBAAA,CAwJkErE,sBAAsB,GAxJ1F9C,EAAE,CAAAmH,iBAAA,CAwJqGnH,EAAE,CAACqH,MAAM,GAxJhHrH,EAAE,CAAAmH,iBAAA,CAwJ2H3F,kBAAkB;AAAA,CAA4D;AACpTiD,kBAAkB,CAAC6C,IAAI,kBAzJkFtH,EAAE,CAAAuH,iBAAA;EAAApD,IAAA,EAyJRM,kBAAkB;EAAA+C,SAAA;EAAAC,QAAA;EAAAC,YAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAzJZ5H,EAAE,CAAA8H,WAAA,OAAAD,GAAA,CAAAhD,EAAA;IAAA;EAAA;EAAAkD,MAAA;IAAAlD,EAAA;IAAAI,OAAA;IAAAC,KAAA;IAAAf,IAAA;IAAAgB,IAAA;IAAA6B,QAAA;IAAA5B,KAAA;IAAAN,SAAA;EAAA;EAAAkD,OAAA;IAAAjD,QAAA;IAAAC,KAAA;EAAA;EAAAiD,QAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,4BAAAT,EAAA,EAAAC,GAAA;EAAAS,aAAA;AAAA,EAyJiW;AAC5c;EAAA,QAAArE,SAAA,oBAAAA,SAAA,KA1JyGjE,EAAE,CAAAkE,iBAAA,CA0JhBO,kBAAkB,EAAc,CAAC;IAChHN,IAAI,EAAE5D,SAAS;IACf+D,IAAI,EAAE,CAAC;MACC2D,QAAQ,EAAE,WAAW;MACrBM,QAAQ,EAAE,YAAY;MACtBH,QAAQ,EAAG;IACf,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEjE,IAAI,EAAEnE,EAAE,CAACoH;IAAW,CAAC,EAAE;MAAEjD,IAAI,EAAErB;IAAuB,CAAC,EAAE;MAAEqB,IAAI,EAAEnE,EAAE,CAACqH;IAAO,CAAC,EAAE;MAAElD,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAC9IF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAAC9C,kBAAkB;MAC7B,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAEqD,EAAE,EAAE,CAAC;MACjCV,IAAI,EAAE3D;IACV,CAAC,EAAE;MACC2D,IAAI,EAAE1D,WAAW;MACjB6D,IAAI,EAAE,CAAC,SAAS;IACpB,CAAC,CAAC;IAAEW,OAAO,EAAE,CAAC;MACVd,IAAI,EAAE3D;IACV,CAAC,CAAC;IAAE0E,KAAK,EAAE,CAAC;MACRf,IAAI,EAAE3D;IACV,CAAC,CAAC;IAAE2D,IAAI,EAAE,CAAC;MACPA,IAAI,EAAE3D;IACV,CAAC,CAAC;IAAE2E,IAAI,EAAE,CAAC;MACPhB,IAAI,EAAE3D;IACV,CAAC,CAAC;IAAEwG,QAAQ,EAAE,CAAC;MACX7C,IAAI,EAAE3D;IACV,CAAC,CAAC;IAAE4E,KAAK,EAAE,CAAC;MACRjB,IAAI,EAAE3D;IACV,CAAC,CAAC;IAAEsE,SAAS,EAAE,CAAC;MACZX,IAAI,EAAE3D;IACV,CAAC,CAAC;IAAEuE,QAAQ,EAAE,CAAC;MACXZ,IAAI,EAAEzD;IACV,CAAC,CAAC;IAAEsE,KAAK,EAAE,CAAC;MACRb,IAAI,EAAEzD;IACV,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAM8H,qBAAqB,CAAC;AAE5BA,qBAAqB,CAAC/E,IAAI,YAAAgF,8BAAA9E,CAAA;EAAA,YAAAA,CAAA,IAAwF6E,qBAAqB;AAAA,CAAkD;AACzLA,qBAAqB,CAACE,IAAI,kBAlM+E1I,EAAE,CAAA2I,gBAAA;EAAAxE,IAAA,EAkMQqE;AAAqB,EAAsE;AAC9MA,qBAAqB,CAACI,IAAI,kBAnM+E5I,EAAE,CAAA6I,gBAAA,IAmMgC;AAC3I;EAAA,QAAA5E,SAAA,oBAAAA,SAAA,KApMyGjE,EAAE,CAAAkE,iBAAA,CAoMhBsE,qBAAqB,EAAc,CAAC;IACnHrE,IAAI,EAAExD,QAAQ;IACd2D,IAAI,EAAE,CAAC;MACCwE,YAAY,EAAE,CAACrE,kBAAkB,CAAC;MAClCsE,OAAO,EAAE,CAACtE,kBAAkB;IAChC,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,MAAMuE,eAAe,CAAC;AAEtBA,eAAe,CAACvF,IAAI,YAAAwF,wBAAAtF,CAAA;EAAA,YAAAA,CAAA,IAAwFqF,eAAe;AAAA,CAAkD;AAC7KA,eAAe,CAACN,IAAI,kBA/MqF1I,EAAE,CAAA2I,gBAAA;EAAAxE,IAAA,EA+ME6E;AAAe,EAAoE;AAChMA,eAAe,CAACJ,IAAI,kBAhNqF5I,EAAE,CAAA6I,gBAAA;EAAAK,SAAA,EAgN8B,CAACpG,sBAAsB,CAAC;EAAAqG,OAAA,GAAY,CAACX,qBAAqB,CAAC;AAAA,EAAI;AACxM;EAAA,QAAAvE,SAAA,oBAAAA,SAAA,KAjNyGjE,EAAE,CAAAkE,iBAAA,CAiNhB8E,eAAe,EAAc,CAAC;IAC7G7E,IAAI,EAAExD,QAAQ;IACd2D,IAAI,EAAE,CAAC;MACCyE,OAAO,EAAE,CAACtE,kBAAkB,CAAC;MAC7B0E,OAAO,EAAE,CAACX,qBAAqB,CAAC;MAChCU,SAAS,EAAE,CAACpG,sBAAsB;IACtC,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsG,kBAAkB,CAAC;EACrBrG,WAAWA,CAAC4B,IAAI,EAAEM,OAAO;EACzB;EACAjC,UAAU,EAAET,OAAO,EAAER,KAAK,EAAEkB,QAAQ,EAAE;IAClC;IACA,IAAI,CAACoG,cAAc,GAAInH,UAAU,IAAK;MAClC,IAAI,CAACA,UAAU,GAAGA,UAAU;MAC5B,IAAI,IAAI,CAACoH,aAAa,IAAI,IAAI,CAACA,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;QACrD,IAAI,CAACD,aAAa,CAACE,OAAO,CAAC,CAAC,CAACC,MAAM,EAAEnG,OAAO,CAAC,KAAK,IAAI,CAACoG,wBAAwB,CAACD,MAAM,EAAEnG,OAAO,CAAC,CAAC;QACjG,IAAI,CAACgG,aAAa,GAAG/E,SAAS;MAClC;IACJ,CAAC;IACD,IAAI,CAACI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACgF,SAAS,GAAG5I,iBAAiB,CAACiC,UAAU,CAAC;IAC9C,IAAI,CAACiC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAClD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACkB,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACV,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACY,IAAI,CAAC,CAAC;EACf;EACA,IAAIyG,SAASA,CAAA,EAAG;IACZ,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MACxB,IAAI,CAACA,gBAAgB,GAAG,IAAI3I,OAAO,CAAC,CAAC;MACrC,IAAI,CAAC4I,mBAAmB,GAAG,IAAI,CAACD,gBAAgB,CAACxG,YAAY,CAAC,CAAC;IACnE;IACA,OAAO,IAAI,CAACyG,mBAAmB;EACnC;EACA,IAAIC,cAAcA,CAAA,EAAG;IACjB,IAAI,CAAC,IAAI,CAACC,qBAAqB,EAAE;MAC7B,IAAI,CAACA,qBAAqB,GAAG,IAAI9I,OAAO,CAAC,CAAC;MAC1C,IAAI,CAAC+I,wBAAwB,GAAG,IAAI,CAACD,qBAAqB,CAAC3G,YAAY,CAAC,CAAC;IAC7E;IACA,OAAO,IAAI,CAAC4G,wBAAwB;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACInE,OAAOA,CAAC2D,MAAM,EAAE;IACZ,MAAMnG,OAAO,GAAG,IAAIpC,OAAO,CAAC,CAAC;IAC7B,IAAI,IAAI,CAACyI,SAAS,EAAE;MAChB,IAAI,CAAC,IAAI,CAACzH,UAAU,EAAE;QAClB;QACA,IAAI,CAAC,IAAI,CAACoH,aAAa,EAAE;UACrB,IAAI,CAACA,aAAa,GAAG,EAAE;QAC3B;QACA,IAAI,CAACA,aAAa,CAACY,IAAI,CAAC,CAACT,MAAM,EAAEnG,OAAO,CAAC,CAAC;MAC9C,CAAC,MACI;QACD,IAAI,CAACoG,wBAAwB,CAACD,MAAM,EAAEnG,OAAO,CAAC;MAClD;IACJ;IACA,OAAOA,OAAO,CAACD,YAAY,CAAC,CAAC;EACjC;EACA;EACAqG,wBAAwBA,CAACD,MAAM,EAAEnG,OAAO,EAAE;IACtC;IACA,MAAM6G,OAAO,GAAInF,KAAK,IAAK;MACvB,IAAI,CAACL,IAAI,CAACiC,GAAG,CAAC,MAAM;QAChBtD,OAAO,CAAC0B,KAAK,CAACA,KAAK,CAAC;QACpB,IAAI,IAAI,CAACgF,qBAAqB,EAAE;UAC5B;UACA;UACA,IAAI,CAACA,qBAAqB,CAACxG,IAAI,CAAC;YAAEiG,MAAM;YAAEzE;UAAM,CAAC,CAAC;QACtD;MACJ,CAAC,CAAC;IACN,CAAC;IACD,IAAI,CAACL,IAAI,CAAC8B,iBAAiB,CAAC,MAAM;MAC9B,IAAI;QACA,IAAI,CAACvE,UAAU,CACV4D,OAAO,CAAC,IAAI,CAACb,OAAO,EAAE;UAAEwE;QAAO,CAAC,CAAC,CACjCW,IAAI,CAAErG,KAAK,IAAK;UACjB,IAAI,CAACY,IAAI,CAACiC,GAAG,CAAC,MAAM;YAChBtD,OAAO,CAACE,IAAI,CAACO,KAAK,CAAC;YACnBT,OAAO,CAAC+G,QAAQ,CAAC,CAAC;YAClB,IAAI,IAAI,CAACR,gBAAgB,EAAE;cACvB,IAAI,CAACA,gBAAgB,CAACrG,IAAI,CAAC;gBAAEiG,MAAM;gBAAE1F;cAAM,CAAC,CAAC;YACjD;UACJ,CAAC,CAAC;QACN,CAAC,EAAEoG,OAAO,CAAC;MACf,CAAC,CACD,OAAOG,CAAC,EAAE;QACNH,OAAO,CAACG,CAAC,CAAC;MACd;IACJ,CAAC,CAAC;EACN;EACA;EACAnH,IAAIA,CAAA,EAAG;IACH,IAAI,IAAI,CAACwG,SAAS,EAAE;MAChB,IAAI,YAAY,IAAI3H,MAAM,EAAE;QACxB,IAAI,CAACE,UAAU,GAAGA,UAAU;MAChC,CAAC,MACI;QACD,MAAMqB,SAAS,GAAG,IAAI,CAACN,QAAQ,GAAG,MAAM,GAAG,IAAI,CAACA,QAAQ,GAAG,EAAE;QAC7DJ,MAAM,CAACnB,UAAU,CAAC,IAAI,CAACuD,OAAO,EAAE,IAAI,CAACoE,cAAc,EAAE9F,SAAS,EAAE,IAAI,CAAChB,OAAO,EAAE,IAAI,CAACR,KAAK,CAAC;MAC7F;IACJ;EACJ;AACJ;AACAqH,kBAAkB,CAAC3F,IAAI,YAAA8G,2BAAA5G,CAAA;EAAA,YAAAA,CAAA,IAAwFyF,kBAAkB,EA1UxBpJ,EAAE,CAAA4D,QAAA,CA0UwC5D,EAAE,CAACqH,MAAM,GA1UnDrH,EAAE,CAAA4D,QAAA,CA0U8DnC,qBAAqB,GA1UrFzB,EAAE,CAAA4D,QAAA,CA0UgG1D,WAAW,GA1U7GF,EAAE,CAAA4D,QAAA,CA0UwHtC,kBAAkB,MA1U5ItB,EAAE,CAAA4D,QAAA,CA0UuKrC,eAAe,MA1UxLvB,EAAE,CAAA4D,QAAA,CA0UmNvC,kBAAkB;AAAA,CAA6D;AAC7Y+H,kBAAkB,CAACvF,KAAK,kBA3UiF7D,EAAE,CAAA8D,kBAAA;EAAAC,KAAA,EA2UQqF,kBAAkB;EAAApF,OAAA,EAAlBoF,kBAAkB,CAAA3F;AAAA,EAAG;AACxI;EAAA,QAAAQ,SAAA,oBAAAA,SAAA,KA5UyGjE,EAAE,CAAAkE,iBAAA,CA4UhBkF,kBAAkB,EAAc,CAAC;IAChHjF,IAAI,EAAEhE;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEgE,IAAI,EAAEnE,EAAE,CAACqH;IAAO,CAAC,EAAE;MAAElD,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QACnFF,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAAC7C,qBAAqB;MAChC,CAAC;IAAE,CAAC,EAAE;MAAE0C,IAAI,EAAEC,MAAM;MAAEC,UAAU,EAAE,CAAC;QAC/BF,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAACpE,WAAW;MACtB,CAAC;IAAE,CAAC,EAAE;MAAEiE,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAClCF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAAChD,kBAAkB;MAC7B,CAAC;IAAE,CAAC,EAAE;MAAE6C,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAClCF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAAC/C,eAAe;MAC1B,CAAC;IAAE,CAAC,EAAE;MAAE4C,IAAI,EAAEI,SAAS;MAAEF,UAAU,EAAE,CAAC;QAClCF,IAAI,EAAE9D;MACV,CAAC,EAAE;QACC8D,IAAI,EAAE/D,MAAM;QACZkE,IAAI,EAAE,CAACjD,kBAAkB;MAC7B,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC;AAAA;AAExB,MAAMmJ,iBAAiB,CAAC;AAExBA,iBAAiB,CAAC/G,IAAI,YAAAgH,0BAAA9G,CAAA;EAAA,YAAAA,CAAA,IAAwF6G,iBAAiB;AAAA,CAAkD;AACjLA,iBAAiB,CAAC9B,IAAI,kBAxWmF1I,EAAE,CAAA2I,gBAAA;EAAAxE,IAAA,EAwWIqG;AAAiB,EAAG;AACnIA,iBAAiB,CAAC5B,IAAI,kBAzWmF5I,EAAE,CAAA6I,gBAAA;EAAAK,SAAA,EAyWkC,CAACE,kBAAkB;AAAC,EAAG;AACpK;EAAA,QAAAnF,SAAA,oBAAAA,SAAA,KA1WyGjE,EAAE,CAAAkE,iBAAA,CA0WhBsG,iBAAiB,EAAc,CAAC;IAC/GrG,IAAI,EAAExD,QAAQ;IACd2D,IAAI,EAAE,CAAC;MACC4E,SAAS,EAAE,CAACE,kBAAkB;IAClC,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,MAAMsB,+BAA+B,CAAC;EAClC3H,WAAWA,CAAC4H,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,uBAAuB,GAAG,KAAK;EACxC;EACAC,UAAUA,CAACC,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,EAAE;MACR,IAAI,CAACH,IAAI,CAAC1E,KAAK,CAAC,CAAC;IACrB,CAAC,MACI;MACD;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAAC0E,IAAI,CAACvE,oBAAoB,KAAK0E,KAAK,IACxCC,OAAO,CAAC,IAAI,CAACJ,IAAI,CAACvE,oBAAoB,CAAC,KAAK,KAAK,EAAE;QACnD,IAAI,CAACwE,uBAAuB,GAAG,IAAI;MACvC;IACJ;EACJ;EACAI,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAACC,QAAQ,GAAGD,EAAE;IAClB,IAAI,IAAI,CAACL,uBAAuB,EAAE;MAC9B,IAAI,CAACA,uBAAuB,GAAG,KAAK;MACpC,IAAI,CAACM,QAAQ,CAAC,IAAI,CAAC;IACvB;EACJ;EACAC,iBAAiBA,CAACF,EAAE,EAAE;IAClB,IAAI,CAACG,SAAS,GAAGH,EAAE;EACvB;EACAI,SAASA,CAACC,MAAM,EAAE;IACd,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACI,MAAM,CAAC;IACzB;IACA,IAAI,IAAI,CAACF,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAAC,CAAC;IACpB;EACJ;AACJ;AACAV,+BAA+B,CAACjH,IAAI,YAAA8H,wCAAA5H,CAAA;EAAA,YAAAA,CAAA,IAAwF+G,+BAA+B,EAzZlD1K,EAAE,CAAAmH,iBAAA,CAyZkE1C,kBAAkB;AAAA,CAA4C;AAC3OiG,+BAA+B,CAACc,IAAI,kBA1ZqExL,EAAE,CAAAyL,iBAAA;EAAAtH,IAAA,EA0ZKuG,+BAA+B;EAAAlD,SAAA;EAAAE,YAAA,WAAAgE,6CAAA9D,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MA1ZtC5H,EAAE,CAAA2L,UAAA,sBAAAC,4DAAAN,MAAA;QAAA,OA0ZKzD,GAAA,CAAAwD,SAAA,CAAAC,MAAgB,CAAC;MAAA;IAAA;EAAA;EAAAO,QAAA,GA1ZxB7L,EAAE,CAAA8L,kBAAA,CA0ZgM,CACnS;IACIC,KAAK,EAAE,IAAI;IACXC,OAAO,EAAE7K,iBAAiB;IAC1B8K,WAAW,EAAErL,UAAU,CAAC,MAAM8J,+BAA+B;EACjE,CAAC,CACJ;AAAA,EAAiB;AACtB;EAAA,QAAAzG,SAAA,oBAAAA,SAAA,KAjayGjE,EAAE,CAAAkE,iBAAA,CAiahBwG,+BAA+B,EAAc,CAAC;IAC7HvG,IAAI,EAAEtD,SAAS;IACfyD,IAAI,EAAE,CAAC;MACC4E,SAAS,EAAE,CACP;QACI6C,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE7K,iBAAiB;QAC1B8K,WAAW,EAAErL,UAAU,CAAC,MAAM8J,+BAA+B;MACjE,CAAC,CACJ;MACDnC,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEpE,IAAI,EAAEM;IAAmB,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAE4G,SAAS,EAAE,CAAC;MAClGlH,IAAI,EAAErD,YAAY;MAClBwD,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC;IACjC,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAM4H,oBAAoB,CAAC;AAE3BA,oBAAoB,CAACzI,IAAI,YAAA0I,6BAAAxI,CAAA;EAAA,YAAAA,CAAA,IAAwFuI,oBAAoB;AAAA,CAAkD;AACvLA,oBAAoB,CAACxD,IAAI,kBArbgF1I,EAAE,CAAA2I,gBAAA;EAAAxE,IAAA,EAqbO+H;AAAoB,EAA+I;AACrRA,oBAAoB,CAACtD,IAAI,kBAtbgF5I,EAAE,CAAA6I,gBAAA;EAAAM,OAAA,GAsbuC,CAAC/H,WAAW,EAAEoH,qBAAqB,CAAC;AAAA,EAAI;AAC1L;EAAA,QAAAvE,SAAA,oBAAAA,SAAA,KAvbyGjE,EAAE,CAAAkE,iBAAA,CAubhBgI,oBAAoB,EAAc,CAAC;IAClH/H,IAAI,EAAExD,QAAQ;IACd2D,IAAI,EAAE,CAAC;MACCwE,YAAY,EAAE,CAAC4B,+BAA+B,CAAC;MAC/C3B,OAAO,EAAE,CAAC2B,+BAA+B,CAAC;MAC1CvB,OAAO,EAAE,CAAC/H,WAAW,EAAEoH,qBAAqB;IAChD,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASlH,kBAAkB,EAAED,kBAAkB,EAAEE,eAAe,EAAEC,kBAAkB,EAAEC,qBAAqB,EAAE2H,kBAAkB,EAAE3E,kBAAkB,EAAEyH,oBAAoB,EAAEpJ,sBAAsB,EAAEkG,eAAe,EAAEwB,iBAAiB,EAAEE,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}