{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Sakka/Desktop/PICLOUD-GestionUser - last version - Copie backup/dashboard-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@abacritt/angularx-social-login\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, socialAuthService, router) {\n    this.http = http;\n    this.socialAuthService = socialAuthService;\n    this.router = router;\n    // État d'authentification (false par défaut)\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    // Observable que les composants peuvent écouter\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    this.apiServerUrl = \"http://localhost:8089/skillswap\";\n    this.checkAuthOnInit(); // Vérifie l'authentification au démarrage\n  }\n\n  logout() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // 1. Déconnexion Google\n        yield _this.socialAuthService.signOut();\n        // 2. Appel au backend pour invalider la session\n        yield _this.http.post(`${_this.apiServerUrl}/user/logout`, {}).toPromise();\n        // 3. Nettoyage local\n        localStorage.removeItem('auth_token');\n        // 4. Redirection\n        yield _this.router.navigate(['/login']);\n        // 5. Rechargement pour reset complet\n        window.location.reload();\n      } catch (error) {\n        console.error('Erreur logout:', error);\n        // Fallback si échec\n        localStorage.removeItem('auth_token');\n        _this.router.navigate(['/login']);\n      }\n    })();\n  }\n  // Vérifie si un token existe\n  checkAuthOnInit() {\n    const token = localStorage.getItem('auth_token');\n    this.isAuthenticatedSubject.next(!!token); // !! convertit en booléen\n  }\n  // Login réussi → stocke le token et notifie les composants\n  setAuthToken(token) {\n    localStorage.setItem('auth_token', token);\n    this.isAuthenticatedSubject.next(true);\n  }\n  // Logout → supprime le token et notifie\n  clearAuth() {\n    localStorage.removeItem('auth_token');\n    this.isAuthenticatedSubject.next(false);\n  }\n  // Vérification synchrone (pour les guards)\n  isAuthenticatedSync() {\n    return !!localStorage.getItem('auth_token');\n  }\n  isAdminUser(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.role === 'ADMIN'; // Adaptez 'role' et 'ADMIN' selon votre structure JWT\n    } catch (e) {\n      console.error('Error decoding token', e);\n      return false;\n    }\n  }\n  getUserInfoFromToken(token) {\n    try {\n      if (!token) return null;\n      const payload = token.split('.')[1];\n      const decoded = JSON.parse(atob(payload));\n      return {\n        id: decoded.id,\n        email: decoded.email,\n        role: decoded.role\n      };\n    } catch (e) {\n      console.error('Error decoding token', e);\n      return null;\n    }\n  }\n  // Optionnel: Méthode pratique pour récupérer les infos du token stocké\n  getCurrentUserInfo() {\n    const token = localStorage.getItem('auth_token');\n    return token ? this.getUserInfoFromToken(token) : null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocialAuthService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","http","socialAuthService","router","isAuthenticatedSubject","isAuthenticated$","asObservable","apiServerUrl","checkAuthOnInit","logout","_this","_asyncToGenerator","signOut","post","toPromise","localStorage","removeItem","navigate","window","location","reload","error","console","token","getItem","next","setAuthToken","setItem","clearAuth","isAuthenticatedSync","isAdminUser","payload","JSON","parse","atob","split","role","e","getUserInfoFromToken","decoded","id","email","getCurrentUserInfo","i0","ɵɵinject","i1","HttpClient","i2","SocialAuthService","i3","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sakka\\Desktop\\PICLOUD-GestionUser - last version - Copie backup\\dashboard-v2\\src\\app\\auth.service.ts"],"sourcesContent":["import { SocialAuthService } from '@abacritt/angularx-social-login';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' }) // Disponible dans toute l'app\nexport class AuthService {\n  // État d'authentification (false par défaut)\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n  \n  // Observable que les composants peuvent écouter\n  public isAuthenticated$: Observable<boolean> = this.isAuthenticatedSubject.asObservable();\n  private apiServerUrl =\"http://localhost:8089/skillswap\";\n\n  constructor(private http: HttpClient,\n    private socialAuthService: SocialAuthService,\n    private router: Router) {\n    this.checkAuthOnInit(); // Vérifie l'authentification au démarrage\n  }\n  async logout(): Promise<void> {\n    try {\n      // 1. Déconnexion Google\n      await this.socialAuthService.signOut();\n      \n      // 2. Appel au backend pour invalider la session\n      await this.http.post(`${this.apiServerUrl}/user/logout`, {}).toPromise();\n      \n      // 3. Nettoyage local\n      localStorage.removeItem('auth_token');\n      \n      // 4. Redirection\n      await this.router.navigate(['/login']);\n      \n      // 5. Rechargement pour reset complet\n      window.location.reload();\n    } catch (error) {\n      console.error('Erreur logout:', error);\n      // Fallback si échec\n      localStorage.removeItem('auth_token');\n      this.router.navigate(['/login']);\n    }\n  }\n\n  // Vérifie si un token existe\n  private checkAuthOnInit(): void {\n    const token = localStorage.getItem('auth_token');\n    this.isAuthenticatedSubject.next(!!token); // !! convertit en booléen\n  }\n\n  // Login réussi → stocke le token et notifie les composants\n  setAuthToken(token: string): void {\n    localStorage.setItem('auth_token', token);\n    this.isAuthenticatedSubject.next(true);\n  }\n\n  // Logout → supprime le token et notifie\n  clearAuth(): void {\n    localStorage.removeItem('auth_token');\n    this.isAuthenticatedSubject.next(false);\n  }\n\n  // Vérification synchrone (pour les guards)\n  isAuthenticatedSync(): boolean {\n    return !!localStorage.getItem('auth_token');\n  }\n  \n  isAdminUser(token: string): boolean {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.role === 'ADMIN'; // Adaptez 'role' et 'ADMIN' selon votre structure JWT\n    } catch (e) {\n      console.error('Error decoding token', e);\n      return false;\n    }\n  }\n\n  getUserInfoFromToken(token: string): { id: number, email: string, role: string } | null {\n    try {\n      if (!token) return null;\n      \n      const payload = token.split('.')[1];\n      const decoded = JSON.parse(atob(payload));\n      \n      return {\n        id: decoded.id,\n        email: decoded.email,\n        role: decoded.role\n      };\n    } catch (e) {\n      console.error('Error decoding token', e);\n      return null;\n    }\n  }\n\n  // Optionnel: Méthode pratique pour récupérer les infos du token stocké\n  getCurrentUserInfo() {\n    const token = localStorage.getItem('auth_token');\n    return token ? this.getUserInfoFromToken(token) : null;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}