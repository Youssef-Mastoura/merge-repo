{"ast":null,"code":"import { catchError, from, tap, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class UserService {\n  constructor(http, authService, router) {\n    this.http = http;\n    this.authService = authService;\n    this.router = router;\n    this.apiServerUrl = \"http://localhost:8089/skillswap\";\n  }\n  registerWithGoogle(user) {\n    return this.http.post(`${this.apiServerUrl}/user/oauth2/google`, {\n      provider: 'google',\n      providerId: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      photoUrl: user.photoUrl,\n      idToken: user.idToken\n    });\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiServerUrl}/user/login`, credentials).pipe(catchError(error => {\n      // Transforme l'erreur en un format plus lisible\n      if (error.status === 401) {\n        throw new Error('Email ou mot de passe incorrect');\n      }\n      throw new Error('Erreur de connexion au serveur');\n    }));\n  }\n  logout() {\n    // Convertit la Promise en Observable\n    return from(this.authService.logout()).pipe(tap(() => {\n      this.authService.clearAuth();\n      this.router.navigate(['/admin/login-admin']);\n    }), catchError(error => {\n      console.error('Logout error:', error);\n      this.authService.clearAuth();\n      this.router.navigate(['/admin/login-admin']);\n      return throwError(() => error);\n    }));\n  }\n  getUsers() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get(`${this.apiServerUrl}/user/getall`, {\n      headers\n    });\n  }\n  addUser(user) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n      //  'Authorization': 'Bearer your-token' \n    });\n\n    return this.http.post(`${this.apiServerUrl}/user/register`, user);\n  }\n  updateuser(user) {\n    return this.http.put(`${this.apiServerUrl}update`, user);\n  }\n  deleteUser(userId) {\n    return this.http.delete(`${this.apiServerUrl}/user/delete/${userId}`);\n  }\n  exportUsersToExcel() {\n    window.open(`${this.apiServerUrl}/user/export/excel`, '_blank');\n  }\n  // Dans user.service.ts\n  resetPassword(email) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiServerUrl}/user/resetpassword/${email}`, null, {\n      headers\n    }).pipe(catchError(error => {\n      if (error.status === 404) {\n        throw new Error('Utilisateur introuvable');\n      }\n      throw new Error(error.error?.message || 'Erreur lors de la demande de réinitialisation');\n    }));\n  }\n  // Ajoutez cette méthode dans user.service.ts\n  changePassword(code, newPassword) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiServerUrl}/user/changepassword/${code}/${newPassword}`, null, {\n      headers\n    }).pipe(catchError(error => {\n      if (error.status === 400) {\n        throw new Error('Code invalide ou expiré');\n      }\n      throw new Error('Erreur lors du changement de mot de passe');\n    }));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","from","tap","throwError","HttpHeaders","UserService","constructor","http","authService","router","apiServerUrl","registerWithGoogle","user","post","provider","providerId","id","email","firstName","lastName","photoUrl","idToken","login","credentials","pipe","error","status","Error","logout","clearAuth","navigate","console","getUsers","headers","get","addUser","updateuser","put","deleteUser","userId","delete","exportUsersToExcel","window","open","resetPassword","message","changePassword","code","newPassword","i0","ɵɵinject","i1","HttpClient","i2","AuthService","i3","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sakka\\Desktop\\Prépa\\final\\dashboard-v2\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, from, Observable, tap, throwError } from 'rxjs';\nimport { User } from '../back-office/models/user'; \nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\nimport { SocialUser } from '@abacritt/angularx-social-login';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private apiServerUrl =\"http://localhost:8089/skillswap\";\n\n  constructor(private http: HttpClient,private authService:AuthService,private router:Router){}\n  public registerWithGoogle(user: SocialUser): Observable<any> {\n    return this.http.post(`${this.apiServerUrl}/user/oauth2/google`, {\n      provider: 'google',\n      providerId: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      photoUrl: user.photoUrl,\n      idToken: user.idToken\n    });\n  }\n  \n  login(credentials: {email: string, password: string}): Observable<any> {\n    return this.http.post(`${this.apiServerUrl}/user/login`, credentials).pipe(\n      catchError(error => {\n        // Transforme l'erreur en un format plus lisible\n        if (error.status === 401) {\n          throw new Error('Email ou mot de passe incorrect');\n        }\n        throw new Error('Erreur de connexion au serveur');\n      })\n    );\n  }\n \n  logout(): Observable<void> {\n    // Convertit la Promise en Observable\n    return from(this.authService.logout()).pipe(\n      tap(() => {\n        this.authService.clearAuth();\n        this.router.navigate(['/admin/login-admin']);\n      }),\n      catchError(error => {\n        console.error('Logout error:', error);\n        this.authService.clearAuth();\n        this.router.navigate(['/admin/login-admin']);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  public getUsers(): Observable<User[]> {\n    const headers =new HttpHeaders({\n      'Content-Type': 'application/json',\n     // 'Authorization': `Bearer ${token}`\n    });\n  \n    return this.http.get<User[]>(`${this.apiServerUrl}/user/getall`,{headers});\n  }\n\n  public addUser(user: User): Observable<User> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    //  'Authorization': 'Bearer your-token' \n    });\n    return this.http.post<User>(`${this.apiServerUrl}/user/register`, user)\n  }\n\n  public updateuser(user: User): Observable<User> {\n    return this.http.put<User>(`${this.apiServerUrl}update`, user);\n  }\n\n  public deleteUser(userId: number): Observable<void> {\n    \n    return this.http.delete<void>(`${this.apiServerUrl}/user/delete/${userId}`);\n  }\n\n  exportUsersToExcel(): void {\n    window.open(`${this.apiServerUrl}/user/export/excel`, '_blank');\n  }\n\n  // Dans user.service.ts\npublic resetPassword(email: string): Observable<any> {\n  const headers = new HttpHeaders({\n    'Content-Type': 'application/json',\n  });\n  return this.http.post(`${this.apiServerUrl}/user/resetpassword/${email}`, null, { headers }).pipe(\n    catchError(error => {\n      if (error.status === 404) {\n        throw new Error('Utilisateur introuvable');\n      }\n      throw new Error(error.error?.message || 'Erreur lors de la demande de réinitialisation');\n    })\n  );\n}\n// Ajoutez cette méthode dans user.service.ts\npublic changePassword(code: string, newPassword: string): Observable<any> {\n  const headers = new HttpHeaders({\n    'Content-Type': 'application/json'\n  });\n  \n  return this.http.post(\n    `${this.apiServerUrl}/user/changepassword/${code}/${newPassword}`, \n    null, \n    { headers }\n  ).pipe(\n    catchError(error => {\n      if (error.status === 400) {\n        throw new Error('Code invalide ou expiré');\n      }\n      throw new Error('Erreur lors du changement de mot de passe');\n    })\n  );\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}