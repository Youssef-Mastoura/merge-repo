{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CourseService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8089/skillswap/courses';\n  }\n  /* Méthodes existantes (conservées telles quelles) */\n  getAllCourses() {\n    return this.http.get(this.baseUrl);\n  }\n  getCourseById(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  addCourse(course) {\n    return this.http.post(`${this.baseUrl}/addcours`, course);\n  }\n  updateCourse(course) {\n    return this.http.put(`${this.baseUrl}`, course);\n  }\n  deleteCourse(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  getCoursesByCategory(categoryName) {\n    return this.http.get(`${this.baseUrl}/category/${categoryName}`);\n  }\n  getCoursesByProfessor(professorId) {\n    return this.http.get(`${this.baseUrl}/professor/${professorId}`);\n  }\n  rateCourse(courseId, rating) {\n    return this.http.put(`${this.baseUrl}/${courseId}/${rating}`, null, {\n      params: {\n        rating: rating.toString()\n      }\n    });\n  }\n  getPopularCourses(limit = 5) {\n    return this.http.get(`${this.baseUrl}/popular?limit=${limit}`);\n  }\n  incrementViewCount(courseId) {\n    return this.http.post(`${this.baseUrl}/${courseId}/view`, null);\n  }\n  /* Nouvelles méthodes ajoutées */\n  findByTeacherId(teacherId) {\n    return this.http.get(`${this.baseUrl}/teacher/${teacherId}`);\n  }\n  findByStudentId(studentId) {\n    return this.http.get(`${this.baseUrl}/student/${studentId}`);\n  }\n  createCourse(course, teacherId) {\n    return this.http.post(`${this.baseUrl}/teacher/${teacherId}`, course);\n  }\n  enrollStudent(courseId, studentId) {\n    return this.http.post(`${this.baseUrl}/${courseId}/enroll/${studentId}`, null);\n  }\n  unenrollStudent(courseId, studentId) {\n    return this.http.post(`${this.baseUrl}/${courseId}/unenroll/${studentId}`, null);\n  }\n  searchCourses(keyword) {\n    return this.http.get(`${this.baseUrl}/search`, {\n      params: {\n        keyword\n      }\n    });\n  }\n  addContentToCourse(courseId, content) {\n    return this.http.post(`${this.baseUrl}/${courseId}/addContent`, content);\n  }\n  getCoursesByTeacher(teacherId) {\n    return this.http.get(`${this.baseUrl}/teacher/${teacherId}`);\n  }\n  getCoursesByStudent(studentId) {\n    return this.http.get(`${this.baseUrl}/student/${studentId}`);\n  }\n  // Dans votre course.service.ts\n  getStudentCourses(studentId) {\n    // Implémentez la logique pour récupérer les cours d'un étudiant\n    // Par exemple :\n    return this.http.get(`${this.baseUrl}/students/${studentId}/courses`);\n  }\n}\nCourseService.ɵfac = function CourseService_Factory(t) {\n  return new (t || CourseService)(i0.ɵɵinject(i1.HttpClient));\n};\nCourseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CourseService,\n  factory: CourseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CourseService","constructor","http","baseUrl","getAllCourses","get","getCourseById","id","addCourse","course","post","updateCourse","put","deleteCourse","delete","getCoursesByCategory","categoryName","getCoursesByProfessor","professorId","rateCourse","courseId","rating","params","toString","getPopularCourses","limit","incrementViewCount","findByTeacherId","teacherId","findByStudentId","studentId","createCourse","enrollStudent","unenrollStudent","searchCourses","keyword","addContentToCourse","content","getCoursesByTeacher","getCoursesByStudent","getStudentCourses","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sakka\\Desktop\\Prépa\\final\\dashboard-v2\\src\\app\\services\\course.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Course } from '../models/course.model';\nimport { Content } from '../models/content.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CourseService {\n  private baseUrl = 'http://localhost:8089/skillswap/courses';\n\n  constructor(private http: HttpClient) { }\n\n  /* Méthodes existantes (conservées telles quelles) */\n  getAllCourses(): Observable<Course[]> {\n    return this.http.get<Course[]>(this.baseUrl);\n  }\n\n  getCourseById(id: number): Observable<Course> {\n    return this.http.get<Course>(`${this.baseUrl}/${id}`);\n  }\n\n  addCourse(course: Course): Observable<Course> {\n    return this.http.post<Course>(`${this.baseUrl}/addcours`, course);\n  }\n\n  updateCourse(course: Course): Observable<Course> {\n    return this.http.put<Course>(`${this.baseUrl}`, course);\n  }\n\n  deleteCourse(id: number): Observable<any> {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n\n  getCoursesByCategory(categoryName: string): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/category/${categoryName}`);\n  }\n  \n  getCoursesByProfessor(professorId: number): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/professor/${professorId}`);\n  }\n\n  rateCourse(courseId: number, rating: number): Observable<any> {\n    return this.http.put(`${this.baseUrl}/${courseId}/${rating}`, null, {\n      params: { rating: rating.toString() }\n    });\n  }\n\n  getPopularCourses(limit: number = 5): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/popular?limit=${limit}`);\n  }\n  \n  incrementViewCount(courseId: number): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/${courseId}/view`, null);\n  }\n\n  /* Nouvelles méthodes ajoutées */\n  findByTeacherId(teacherId: number): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/teacher/${teacherId}`);\n  }\n\n  findByStudentId(studentId: number): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/student/${studentId}`);\n  }\n\ncreateCourse(course: Course, teacherId: number): Observable<Course> {\n  return this.http.post<Course>(`${this.baseUrl}/teacher/${teacherId}`, course);\n}\n\n  enrollStudent(courseId: number, studentId: number): Observable<Course> {\n    return this.http.post<Course>(`${this.baseUrl}/${courseId}/enroll/${studentId}`, null);\n  }\n\n  unenrollStudent(courseId: number, studentId: number): Observable<Course> {\n    return this.http.post<Course>(`${this.baseUrl}/${courseId}/unenroll/${studentId}`, null);\n  }\n\n  searchCourses(keyword: string): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/search`, {\n      params: { keyword }\n    });\n  }\n\n  addContentToCourse(courseId: number, content: Content): Observable<Content> {\n    return this.http.post<Content>(`${this.baseUrl}/${courseId}/addContent`, content);\n  }\n  getCoursesByTeacher(teacherId: number): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/teacher/${teacherId}`);\n  }\n  \n  getCoursesByStudent(studentId: number): Observable<Course[]> {\n    return this.http.get<Course[]>(`${this.baseUrl}/student/${studentId}`);\n  }\n  \n  // Dans votre course.service.ts\ngetStudentCourses(studentId: number): Observable<Course[]> {\n  // Implémentez la logique pour récupérer les cours d'un étudiant\n  // Par exemple :\n  return this.http.get<Course[]>(`${this.baseUrl}/students/${studentId}/courses`);\n}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}