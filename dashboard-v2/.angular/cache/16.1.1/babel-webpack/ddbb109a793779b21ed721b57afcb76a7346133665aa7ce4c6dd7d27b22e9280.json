{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    try {\n      const decodedToken = jwtDecode(token);\n      if (!decodedToken || !decodedToken.roles || !Array.isArray(decodedToken.roles)) {\n        this.router.navigate(['/login']);\n        return false;\n      }\n      return true; // Allow access if the token is valid\n    } catch (error) {\n      console.error('Invalid token', error);\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["jwtDecode","AuthGuard","constructor","authService","router","canActivate","token","localStorage","getItem","navigate","decodedToken","roles","Array","isArray","error","console","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sakka\\Desktop\\Prépa\\final\\dashboard-v2\\src\\app\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './services/auth.service';\nimport { jwtDecode } from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n\n    try {\n      const decodedToken: any = jwtDecode(token);\n      if (!decodedToken || !decodedToken.roles || !Array.isArray(decodedToken.roles)) {\n        this.router.navigate(['/login']);\n        return false;\n      }\n\n      return true; // Allow access if the token is valid\n    } catch (error) {\n      console.error('Invalid token', error);\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,YAAY;;;;AAKtC,OAAM,MAAOC,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACF,KAAK,EAAE;MACV,IAAI,CAACF,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAGd,IAAI;MACF,MAAMC,YAAY,GAAQV,SAAS,CAACM,KAAK,CAAC;MAC1C,IAAI,CAACI,YAAY,IAAI,CAACA,YAAY,CAACC,KAAK,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,YAAY,CAACC,KAAK,CAAC,EAAE;QAC9E,IAAI,CAACP,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;;MAGd,OAAO,IAAI,CAAC,CAAC;KACd,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,IAAI,CAACV,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;AAzBWR,SAAS,C;mBAATA,SAAS,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAATpB,SAAS,C;SAATA,SAAS;EAAAqB,OAAA,EAATrB,SAAS,CAAAsB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}