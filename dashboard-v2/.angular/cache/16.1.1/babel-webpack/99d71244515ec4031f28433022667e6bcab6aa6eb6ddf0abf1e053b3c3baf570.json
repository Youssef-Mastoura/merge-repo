{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators'; // Correct import for catchError\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventserviceServicef {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8089/skillswap/event';\n    // API service \n    this.apiUrl = 'https://api.groq.com/openai/v1/chat/completions';\n    this.apiKey = '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'; // Replace with your actual key\n  }\n\n  getEvent(id) {\n    return this.http.get(`${this.baseUrl}/get-Eventbyid/${id}`);\n  }\n  createEvent(event) {\n    return this.http.post(`${this.baseUrl}/addEvent`, event);\n  }\n  updateEvent(id, event) {\n    return this.http.put(`${this.baseUrl}/updateEvent`, event);\n  }\n  deleteEvent(id) {\n    return this.http.delete(`${this.baseUrl}/deleteEvent/${id}`);\n  }\n  getAllEvents() {\n    return this.http.get(`${this.baseUrl}/getAllEvent`);\n  }\n  register(registration, userId, eventId) {\n    return this.http.post(`http://localhost:8089/skillswap/eventregistration/add_registration_with_user_and_event/${userId}/${eventId}`, registration);\n  }\n  rating(eventId) {\n    return this.http.get(`http://localhost:8089/skillswap/feedback/get_sum_feedback/${eventId}`);\n  }\n  participants(eventId) {\n    return this.http.get(`http://localhost:8089/skillswap/eventregistration/get_participants/${eventId}`);\n  }\n  registrations_user(userId) {\n    return this.http.get(`http://localhost:8089/skillswap/event/get_user_events/${userId}`);\n  }\n  checkregistration(userId, eventId) {\n    return this.http.get(`http://localhost:8089/skillswap/eventregistration/checkRegistration/${userId}/${eventId}`);\n  }\n  sendMessage(messages) {\n    // 1. Set headers\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.apiKey}`,\n      'Content-Type': 'application/json'\n    });\n    // 2. Prepare request body\n    const body = {\n      model: 'llama3-8b-8192',\n      messages: messages,\n      temperature: 0.7\n    };\n    // 3. Make the POST request\n    return this.http.post(this.apiUrl, body, {\n      headers\n    }).pipe(\n    // Proper error handling\n    catchError(error => {\n      console.error('API Error:', error);\n      return throwError(() => new Error('Failed to get AI response'));\n    }));\n  }\n}\nEventserviceServicef.ɵfac = function EventserviceServicef_Factory(t) {\n  return new (t || EventserviceServicef)(i0.ɵɵinject(i1.HttpClient));\n};\nEventserviceServicef.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventserviceServicef,\n  factory: EventserviceServicef.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","HttpHeaders","catchError","EventserviceServicef","constructor","http","baseUrl","apiUrl","apiKey","getEvent","id","get","createEvent","event","post","updateEvent","put","deleteEvent","delete","getAllEvents","register","registration","userId","eventId","rating","participants","registrations_user","checkregistration","sendMessage","messages","headers","body","model","temperature","pipe","error","console","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sakka\\Desktop\\PI\\final\\dashboard-v2\\src\\app\\eventfrontoffice\\serviceseventf\\eventservicef.service.ts"],"sourcesContent":["import { registration } from '../../registration';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { myevent } from '../../event'; \nimport { User } from '../../user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'; \nimport { catchError } from 'rxjs/operators'; // Correct import for catchError\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventserviceServicef {\n\n  private baseUrl = 'http://localhost:8089/skillswap/event'; \n\n  constructor(private http: HttpClient) { }\n  \n  getEvent(id: number): Observable<myevent> {\n    return this.http.get<myevent>(`${this.baseUrl}/get-Eventbyid/${id}`); \n  }\n  createEvent(event: myevent): Observable<myevent> {\n    return this.http.post<myevent>(`${this.baseUrl}/addEvent`, event); \n  }\n  updateEvent(id: number, event: myevent): Observable<myevent> {\n    return this.http.put<myevent>(`${this.baseUrl}/updateEvent`, event); \n  }\n  deleteEvent(id: number): Observable<any> {\n    return this.http.delete(`${this.baseUrl}/deleteEvent/${id}`); \n  }\n  getAllEvents(): Observable<myevent[]> {\n    return this.http.get<myevent[]>(`${this.baseUrl}/getAllEvent`); \n  }\nregister(registration: registration, userId: number, eventId: number): Observable<registration> {\n  return this.http.post<registration>(`http://localhost:8089/skillswap/eventregistration/add_registration_with_user_and_event/${userId}/${eventId}`, registration);\n}\n\nrating (eventId: number): Observable<any> {\n  return this.http.get<any>(`http://localhost:8089/skillswap/feedback/get_sum_feedback/${eventId}`);\n}\n\nparticipants(eventId: number): Observable<User[]> {\n  return this.http.get<User[]>(`http://localhost:8089/skillswap/eventregistration/get_participants/${eventId}`);\n}\n\nregistrations_user(userId: number): Observable<myevent[]> {\n  return this.http.get<myevent[]>(`http://localhost:8089/skillswap/event/get_user_events/${userId}`);\n\n}\ncheckregistration(userId:number, eventId:number):Observable<boolean>{\n  return this.http.get<any>(`http://localhost:8089/skillswap/eventregistration/checkRegistration/${userId}/${eventId}`)\n}\n\n// API service \nprivate readonly apiUrl = 'https://api.groq.com/openai/v1/chat/completions';\nprivate readonly apiKey = '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'; // Replace with your actual key\n\nsendMessage(messages: any[]): Observable<any> {\n  // 1. Set headers\n  const headers = new HttpHeaders({\n    'Authorization': `Bearer ${this.apiKey}`, // Using backticks (`) for template literal\n    'Content-Type': 'application/json'\n  });\n\n  // 2. Prepare request body\n  const body = {\n    model: 'llama3-8b-8192', // Recommended working model\n    messages: messages,\n    temperature: 0.7\n  };\n\n  // 3. Make the POST request\n  return this.http.post(this.apiUrl, body, { headers }).pipe(\n    // Proper error handling\n    catchError(error => {\n      console.error('API Error:', error);\n      return throwError(() => new Error('Failed to get AI response'));\n    })\n  );\n}\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}